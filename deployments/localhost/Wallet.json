{
  "address": "0x5FeaeBfB4439F3516c74939A9D04e95AFE82C4ae",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ExchangeAdd",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a462e687c35acab3759ef29c162e4e39ff0859b0937e82c5d0e2b37c26cef88",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FeaeBfB4439F3516c74939A9D04e95AFE82C4ae",
    "transactionIndex": 0,
    "gasUsed": "1660541",
    "logsBloom": "0x
    "blockHash": "0x37e5b63fb2639cd31fb212880c498bd067d082118a2f82f11ffe22bc1a9494bb",
    "transactionHash": "0x5a462e687c35acab3759ef29c162e4e39ff0859b0937e82c5d0e2b37c26cef88",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 140,
        "transactionHash": "0x5a462e687c35acab3759ef29c162e4e39ff0859b0937e82c5d0e2b37c26cef88",
        "address": "0x5FeaeBfB4439F3516c74939A9D04e95AFE82C4ae",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x37e5b63fb2639cd31fb212880c498bd067d082118a2f82f11ffe22bc1a9494bb"
      }
    ],
    "blockNumber": 140,
    "cumulativeGasUsed": "1660541",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB0f05d25e41FbC2b52013099ED9616f1206Ae21B"
  ],
  "numDeployments": 1,
  "solcInputHash": "30535f268c630507efd0d6ad3941b7af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ExchangeAdd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Withdraw(address,address,uint256,uint256)\":{\"notice\":\"Event when amount withdrawn exchange\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Wallet.sol\":\"Wallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(\\r\\n            fromBalance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n            // decrementing then incrementing.\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        unchecked {\\r\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(\\r\\n                currentAllowance >= amount,\\r\\n                \\\"ERC20: insufficient allowance\\\"\\r\\n            );\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x2ce1eba6311b6b8d11599153d655be08c43ce6a99eed22581d3673f88c95f9e1\",\"license\":\"MIT\"},\"contracts/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./testUSDC.sol\\\";\\r\\nimport \\\"./Wallet.sol\\\";\\r\\n//import \\\"./MathMul.sol\\\";\\r\\n\\r\\n/// @notice Library SafeMath used to prevent overflows and underflows\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Exchange is Ownable {\\r\\n    using SafeMath for uint256; //for prevention of integer overflow\\r\\n    //using MathMul for uint256;\\r\\n\\r\\n    address public immutable Owner;\\r\\n    address usdc;\\r\\n    address public ethToken = address(0);\\r\\n    uint256 decimals = 10**18;\\r\\n\\r\\n    //Token Address List available in DEX\\r\\n    address[] public tokenList;\\r\\n\\r\\n    //s_orderBook mappping: tokenAddress -> Side -> Order Array\\r\\n    mapping(address => mapping(uint256 => _Order[])) public s_orderBook;\\r\\n\\r\\n    //Balance in DEX\\r\\n    mapping(address => mapping(address => uint256)) public s_tokens; //tokenAdress -> msg.sender -> tokenAmt\\r\\n\\r\\n    //Locked value in orders in DEX  user->Token->lockedAmount\\r\\n    mapping(address => mapping(address => uint256)) public lockedFunds;\\r\\n\\r\\n    mapping(address => _Order[]) public s_filledOrders;\\r\\n\\r\\n    uint256 public s_orderId = 0;\\r\\n    bool private s_isManual = true;\\r\\n\\r\\n    //Structs representing an order has unique id, user and amounts to give and get between two s_tokens to exchange\\r\\n    struct _Order {\\r\\n        uint256 id;\\r\\n        address user;\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n        uint256 price; //in usdc\\r\\n        Side side;\\r\\n    }\\r\\n\\r\\n    enum Side {\\r\\n        BUY,\\r\\n        SELL\\r\\n    }\\r\\n\\r\\n    //add events\\r\\n    /// @notice Event when an order is placed on an exchange\\r\\n    event Order(\\r\\n        uint256 id,\\r\\n        address user,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 price,\\r\\n        Side side\\r\\n    );\\r\\n\\r\\n    /// @notice Event when an order is cancelled\\r\\n    event Cancel(\\r\\n        uint256 id,\\r\\n        address user,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    event Fill(\\r\\n        uint256 id,\\r\\n        address user,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    constructor(address _usdc) {\\r\\n        usdc = _usdc;\\r\\n        addToken(usdc);\\r\\n        addToken(ethToken);\\r\\n\\r\\n        Owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    //For Buyer, when making buy order they deposit usdc and receive token of choice\\r\\n    //For seller, when making sell order, they deposit token of choice and receive usdc\\r\\n    function createLimitBuyOrder(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint256 _price //in usdc/token\\r\\n\\r\\n    ) external {\\r\\n        //Token must be approved in DEX\\r\\n        require(isVerifiedToken(_token), \\\"Token unavailable in DEX\\\");\\r\\n\\r\\n        //Our Exchange does not allow buying of USDC\\r\\n        require(_token != usdc, \\\"Unable to purchase USDC\\\");\\r\\n\\r\\n        uint256 totalValue = (_amount.mul(_price)).div(decimals);\\r\\n\\r\\n\\r\\n        //Amount user has deposited in the DEX must be >= value he wants to buy\\r\\n        require(\\r\\n            balanceOf(usdc, msg.sender).sub(getlockedFunds(msg.sender, usdc)) >=\\r\\n                totalValue,\\r\\n            \\\"Insufficient USDC\\\"\\r\\n        );\\r\\n\\r\\n        //Lock the funds (USDC) in the wallet by removing balance in DEX\\r\\n        updateLockedFunds(msg.sender, usdc, totalValue, true);\\r\\n\\r\\n        s_orderBook[_token][uint256(Side.BUY)].push(\\r\\n            _Order(s_orderId, msg.sender, _token, _amount, _price, Side.BUY)\\r\\n        );\\r\\n\\r\\n        emit Order(s_orderId, msg.sender, _token, _amount, _price, Side.BUY);\\r\\n\\r\\n        s_orderId = s_orderId.add(1);\\r\\n    }\\r\\n\\r\\n    function createLimitSellOrder(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint256 _price //in usdc/token\\r\\n    ) external {\\r\\n        //Token must be approved in DEX\\r\\n        require(isVerifiedToken(_token), \\\"Token unavailable in DEX\\\");\\r\\n\\r\\n        //Our Exchange does not allow buying of USDC\\r\\n        require(_token != usdc, \\\"Unable to sell USDC\\\");\\r\\n\\r\\n        //Amount of tokens user deposit in DEX must be >= the amount of tokens they want to sell\\r\\n        require(\\r\\n            balanceOf(_token, msg.sender) -\\r\\n                getlockedFunds(msg.sender, _token) >=\\r\\n                _amount,\\r\\n            \\\"Insufficient tokens\\\"\\r\\n        );\\r\\n\\r\\n        //Lock the funds (tokens) in the wallet\\r\\n        updateLockedFunds(msg.sender, _token, _amount, true);\\r\\n\\r\\n        s_orderBook[_token][uint256(Side.SELL)].push(\\r\\n            _Order(s_orderId, msg.sender, _token, _amount, _price, Side.SELL)\\r\\n        );\\r\\n\\r\\n        emit Order(s_orderId, msg.sender, _token, _amount, _price, Side.SELL);\\r\\n\\r\\n        s_orderId = s_orderId.add(1);\\r\\n    }\\r\\n\\r\\n    function cancelOrder(\\r\\n        Side side,\\r\\n        uint256 _id,\\r\\n        address _token\\r\\n    ) public {\\r\\n        require(_id >= 0 && _id <= s_orderId, \\\"Invalid Order ID\\\");\\r\\n        require(isVerifiedToken(_token), \\\"Token unavailable in DEX\\\");\\r\\n\\r\\n        _Order[] storage _order = s_orderBook[_token][uint256(side)];\\r\\n        uint256 size = _order.length;\\r\\n        _Order memory order;\\r\\n\\r\\n        uint256 index;\\r\\n        for (uint256 i = 0; i < size; i++) {\\r\\n            if (_order[i].id == _id) {\\r\\n                index = i;\\r\\n                order = _order[i];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //Manual cancellation of orders\\r\\n        if (s_isManual) {\\r\\n            require(msg.sender == order.user, \\\"Not Order Owner\\\");\\r\\n\\r\\n            //Unlock funds\\r\\n            if (side == Side.BUY) {\\r\\n                updateLockedFunds(\\r\\n                    msg.sender,\\r\\n                    usdc,\\r\\n                    (order.price.mul(order.amount)).div(decimals),\\r\\n                    false\\r\\n                );\\r\\n            } else if (side == Side.SELL) {\\r\\n                updateLockedFunds(msg.sender, _token, order.amount, false);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint256 j = index; j < size - 1; j++) {\\r\\n            _order[j] = _order[j + 1];\\r\\n        }\\r\\n        delete _order[size - 1];\\r\\n        _order.pop();\\r\\n\\r\\n        s_orderBook[_token][uint256(side)] = _order;\\r\\n\\r\\n        emit Cancel(order.id, msg.sender, _token, order.amount, order.price);\\r\\n    }\\r\\n\\r\\n    function fillOrder(\\r\\n        Side side,\\r\\n        uint256 _id,\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint256 _price\\r\\n    ) public {\\r\\n        require(_id >= 0 && _id <= s_orderId);\\r\\n        _Order[] memory _order = s_orderBook[_token][uint256(side)];\\r\\n        _Order memory order;\\r\\n\\r\\n        order = getOrderFromArray(_order, _id);\\r\\n\\r\\n        require(order.amount >= _amount);\\r\\n\\r\\n        order.amount = order.amount.sub(_amount);\\r\\n\\r\\n        if (side == Side.BUY) {\\r\\n            updateLockedFunds(\\r\\n                order.user,\\r\\n                usdc,\\r\\n                (order.price.mul(_amount)).div(decimals),\\r\\n                false\\r\\n            );\\r\\n        } else if (side == Side.SELL) {\\r\\n            updateLockedFunds(order.user, _token, _amount, false);\\r\\n        }\\r\\n\\r\\n        emit Fill(_id, order.user, _token, _amount, _price);\\r\\n\\r\\n        if (order.amount == 0) {\\r\\n            s_filledOrders[order.user].push(order);\\r\\n            s_isManual = false;\\r\\n            cancelOrder(side, order.id, order.token); //remove filled orders\\r\\n            s_isManual = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function matchOrders(\\r\\n        address _token,\\r\\n        uint256 _id,\\r\\n        Side side\\r\\n    ) external {\\r\\n        //when order is filled,\\r\\n        //BUY Side => deduct USDC from balance, sent token to balance, order updated.\\r\\n        //SELL Side =>deduct token from balance, sent USDC from DEX, order updated.\\r\\n        uint256 saleTokenAmt;\\r\\n        //Token must be approved in DEX\\r\\n        require(isVerifiedToken(_token), \\\"Token unavailable in DEX\\\");\\r\\n        require(_id >= 0 && _id <= s_orderId);\\r\\n\\r\\n        if (side == Side.BUY) {\\r\\n            //Retrieve buy order to be filled\\r\\n            _Order[] memory _order = s_orderBook[_token][0];\\r\\n            _Order memory buyOrderToFill = getOrderFromArray(_order, _id);\\r\\n\\r\\n            //Retrieve sell order to match\\r\\n            _Order[] memory _sellOrder = s_orderBook[_token][1];\\r\\n            for (uint256 i = 0; i < _sellOrder.length; i++) {\\r\\n                //sell order hit buyer's limit price\\r\\n                if (_sellOrder[i].price <= buyOrderToFill.price) {\\r\\n                    _Order memory sellOrder = _sellOrder[i];\\r\\n                    //if buyer's amount to buy > seller's amount to sell\\r\\n                    if (buyOrderToFill.amount > sellOrder.amount) {\\r\\n                        saleTokenAmt = sellOrder.amount;\\r\\n                    }\\r\\n                    //if seller's amount to sell >= buyer's amount to buy\\r\\n                    else if (buyOrderToFill.amount <= sellOrder.amount) {\\r\\n                        saleTokenAmt = buyOrderToFill.amount;\\r\\n                    }\\r\\n\\r\\n                    //Verify current balance\\r\\n                    require(\\r\\n                        balanceOf(usdc, buyOrderToFill.user) >=\\r\\n                            (saleTokenAmt.mul(sellOrder.price)).div(decimals),\\r\\n                        \\\"Insufficient buyer USDC Balance\\\"\\r\\n                    );\\r\\n                    require(\\r\\n                        balanceOf(_token, sellOrder.user) >= saleTokenAmt,\\r\\n                        \\\"Insufficient seller Token Balance\\\"\\r\\n                    );\\r\\n\\r\\n                    //update orders\\r\\n                    fillOrder(\\r\\n                        Side.BUY,\\r\\n                        _id,\\r\\n                        _token,\\r\\n                        saleTokenAmt,\\r\\n                        sellOrder.price\\r\\n                    );\\r\\n                    fillOrder(\\r\\n                        Side.SELL,\\r\\n                        sellOrder.id,\\r\\n                        _token,\\r\\n                        saleTokenAmt,\\r\\n                        sellOrder.price\\r\\n                    );\\r\\n\\r\\n                    //buyer update\\r\\n                    updateBalance(\\r\\n                        _token,\\r\\n                        buyOrderToFill.user,\\r\\n                        saleTokenAmt,\\r\\n                        true\\r\\n                    );\\r\\n                    updateBalance(\\r\\n                        usdc,\\r\\n                        buyOrderToFill.user,\\r\\n                        (sellOrder.price.mul(saleTokenAmt)).div(decimals),\\r\\n                        false\\r\\n                    );\\r\\n\\r\\n                    //seller update\\r\\n                    updateBalance(_token, sellOrder.user, saleTokenAmt, false);\\r\\n                    updateBalance(\\r\\n                        usdc,\\r\\n                        sellOrder.user,\\r\\n                        (sellOrder.price.mul(saleTokenAmt)).div(decimals),\\r\\n                        true\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                if (buyOrderToFill.amount == 0) break;\\r\\n            }\\r\\n        } else if (side == Side.SELL) {\\r\\n            //Retrieve sell order to be filled\\r\\n            _Order[] memory _order = s_orderBook[_token][1];\\r\\n            _Order memory sellOrderToFill = getOrderFromArray(_order, _id);\\r\\n\\r\\n            //Retrieve buy order to match\\r\\n            _Order[] memory _buyOrder = s_orderBook[_token][0];\\r\\n            for (uint256 i = 0; i < _buyOrder.length; i++) {\\r\\n                //sell order hit buyer's limit price\\r\\n                if (_buyOrder[i].price >= sellOrderToFill.price) {\\r\\n                    _Order memory order = _buyOrder[i];\\r\\n\\r\\n                    //if seller's amount to sell > buyer's amount to buy\\r\\n                    if (sellOrderToFill.amount > order.amount) {\\r\\n                        saleTokenAmt = order.amount;\\r\\n                    }\\r\\n                    //if buyer's amount to buy > seller's amount to sell\\r\\n                    else if (sellOrderToFill.amount <= order.amount) {\\r\\n                        saleTokenAmt = sellOrderToFill.amount;\\r\\n                    }\\r\\n\\r\\n                    //Verify current balance\\r\\n                    require(\\r\\n                        balanceOf(_token, sellOrderToFill.user) >= saleTokenAmt,\\r\\n                        \\\"Insufficient seller Token Balance\\\"\\r\\n                    );\\r\\n                    require(\\r\\n                        balanceOf(usdc, order.user) >=\\r\\n                            (saleTokenAmt.mul(order.price)).div(decimals),\\r\\n                        \\\"Insufficient buyer USDC Balance\\\"\\r\\n                    );\\r\\n\\r\\n                    //update orders\\r\\n                    fillOrder(\\r\\n                        Side.SELL,\\r\\n                        _id,\\r\\n                        _token,\\r\\n                        saleTokenAmt,\\r\\n                        order.price\\r\\n                    );\\r\\n                    fillOrder(\\r\\n                        Side.BUY,\\r\\n                        order.id,\\r\\n                        _token,\\r\\n                        saleTokenAmt,\\r\\n                        order.price\\r\\n                    );\\r\\n\\r\\n                    //seller update\\r\\n                    updateBalance(\\r\\n                        _token,\\r\\n                        sellOrderToFill.user,\\r\\n                        saleTokenAmt,\\r\\n                        false\\r\\n                    );\\r\\n                    updateBalance(\\r\\n                        usdc,\\r\\n                        sellOrderToFill.user,\\r\\n                        (order.price.mul(saleTokenAmt)).div(decimals),\\r\\n                        true\\r\\n                    );\\r\\n\\r\\n                    //buyer update\\r\\n                    updateBalance(_token, order.user, saleTokenAmt, true);\\r\\n                    updateBalance(\\r\\n                        usdc,\\r\\n                        order.user,\\r\\n                        (order.price.mul(saleTokenAmt)).div(decimals),\\r\\n                        false\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                if (sellOrderToFill.amount == 0) break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getOrderLength(Side side, address _token)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return s_orderBook[_token][uint256(side)].length;\\r\\n    }\\r\\n\\r\\n    function getOrder(\\r\\n        address _token,\\r\\n        uint256 index,\\r\\n        Side side\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            address,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        _Order memory order = s_orderBook[_token][uint256(side)][index];\\r\\n        return (\\r\\n            order.id,\\r\\n            order.amount,\\r\\n            order.user,\\r\\n            order.price,\\r\\n            uint256(order.side)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getFilledOrderLength(address _user) public view returns (uint256) {\\r\\n        return s_filledOrders[_user].length;\\r\\n    }\\r\\n\\r\\n    function getFilledOrder(address _user, uint256 index)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            address,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        _Order memory filledOrder = s_filledOrders[_user][index];\\r\\n        return (\\r\\n            filledOrder.id,\\r\\n            filledOrder.amount,\\r\\n            filledOrder.user,\\r\\n            filledOrder.price,\\r\\n            uint256(filledOrder.side)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getOrderFromArray(_Order[] memory _order, uint256 _id)\\r\\n        public\\r\\n        pure\\r\\n        returns (_Order memory)\\r\\n    {\\r\\n        _Order memory order;\\r\\n        for (uint256 i = 0; i < _order.length; i++) {\\r\\n            if (_order[i].id == _id) {\\r\\n                order = _order[i];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return order;\\r\\n    }\\r\\n\\r\\n    //Only for Unit Testing in Local Blockchain\\r\\n    function orderExists(\\r\\n        uint256 _id,\\r\\n        Side side,\\r\\n        address _token\\r\\n    ) public view returns (bool) {\\r\\n        _Order[] memory orders = s_orderBook[_token][uint256(side)];\\r\\n\\r\\n        for (uint256 i = 0; i < orders.length; i++) {\\r\\n            if (orders[i].id == _id) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function getlockedFunds(address _user, address _token)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return lockedFunds[_user][_token];\\r\\n    }\\r\\n\\r\\n    function updateLockedFunds(\\r\\n        address _user,\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        bool isAdd\\r\\n    ) public {\\r\\n        if (isAdd) {\\r\\n            lockedFunds[_user][_token] = lockedFunds[_user][_token].add(\\r\\n                _amount\\r\\n            );\\r\\n        } else if (!isAdd) {\\r\\n            lockedFunds[_user][_token] = lockedFunds[_user][_token].sub(\\r\\n                _amount\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //balance of specific tokens in the dex owned by specific user\\r\\n    function balanceOf(address _token, address _user)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return s_tokens[_token][_user];\\r\\n    }\\r\\n\\r\\n    function updateBalance(\\r\\n        address _token,\\r\\n        address _user,\\r\\n        uint256 _amount,\\r\\n        bool isAdd\\r\\n    ) public {\\r\\n        if (isAdd) {\\r\\n            s_tokens[_token][_user] = s_tokens[_token][_user].add(_amount);\\r\\n        } else if (!isAdd) {\\r\\n            s_tokens[_token][_user] = s_tokens[_token][_user].sub(_amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addToken(address _token) public onlyOwner {\\r\\n        address[] memory tokens = tokenList;\\r\\n        bool isAdded = false;\\r\\n        //Cannot be repeated\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            if (tokens[i] == _token) {\\r\\n                isAdded = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(isAdded == false, \\\"Token already verified on DEX!\\\");\\r\\n\\r\\n        tokenList.push(_token);\\r\\n    }\\r\\n\\r\\n    function isVerifiedToken(address _token) public view returns (bool) {\\r\\n        uint256 size = tokenList.length;\\r\\n\\r\\n        for (uint256 i = 0; i < size; i++) {\\r\\n            if (tokenList[i] == _token) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x80fb5f2a55c4c3f256f52edbff15d7b82fbed8f27f2c1a6dde290e389ef02ec7\",\"license\":\"MIT\"},\"contracts/Wallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./testUSDC.sol\\\";\\r\\nimport \\\"./Exchange.sol\\\";\\r\\n\\r\\n/// @notice Library SafeMath used to prevent overflows and underflows\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Wallet is Ownable {\\r\\n    using SafeMath for uint256; //for prevention of integer overflow\\r\\n\\r\\n    address public immutable Owner;\\r\\n\\r\\n    //For prevention of reentrancy\\r\\n    bool private locked;\\r\\n\\r\\n    address public ethToken = address(0);\\r\\n\\r\\n    Exchange tokens;\\r\\n\\r\\n    IERC20 token;\\r\\n\\r\\n    event Deposit(address token, address user, uint256 amount, uint256 balance);\\r\\n\\r\\n    /// @notice Event when amount withdrawn exchange\\r\\n    event Withdraw(\\r\\n        address token,\\r\\n        address user,\\r\\n        uint256 amount,\\r\\n        uint256 balance\\r\\n    );\\r\\n\\r\\n    constructor(address _ExchangeAdd) {\\r\\n        tokens = Exchange(_ExchangeAdd);\\r\\n        Owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function depositETH() external payable {\\r\\n        tokens.updateBalance(ethToken, msg.sender, msg.value, true);\\r\\n\\r\\n        emit Deposit(\\r\\n            ethToken,\\r\\n            msg.sender,\\r\\n            msg.value,\\r\\n            tokens.balanceOf(ethToken, msg.sender)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawETH(uint256 _amount) external {\\r\\n        require(\\r\\n            tokens.balanceOf(ethToken, msg.sender) -\\r\\n                tokens.getlockedFunds(msg.sender, ethToken) >=\\r\\n                _amount,\\r\\n            \\\"Insufficient balance ETH to withdraw\\\"\\r\\n        );\\r\\n        require(!locked, \\\"Reentrant call detected!\\\");\\r\\n        locked = true;\\r\\n        tokens.updateBalance(ethToken, msg.sender, _amount, false);\\r\\n        locked = false;\\r\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\r\\n        require(success, \\\"failed to send amount\\\");\\r\\n\\r\\n        emit Withdraw(\\r\\n            ethToken,\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            tokens.balanceOf(ethToken, msg.sender)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //from and transferFrom is from ERC20 contract\\r\\n    //_token should be an ERC20 token\\r\\n    function depositToken(address _token, uint256 _amount) external {\\r\\n        require(_token != ethToken);\\r\\n        require(\\r\\n            tokens.isVerifiedToken(_token),\\r\\n            \\\"Token not verified on Exchange\\\"\\r\\n        );\\r\\n        //need to add a check to prove that it is an ERC20 token\\r\\n        token = IERC20(_token);\\r\\n\\r\\n        //Requires approval first\\r\\n        require(token.transferFrom(msg.sender, address(this), _amount));\\r\\n        tokens.updateBalance(_token, msg.sender, _amount, true);\\r\\n\\r\\n        emit Deposit(\\r\\n            _token,\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            tokens.balanceOf(_token, msg.sender)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawToken(address _token, uint256 _amount) external {\\r\\n        require(_token != ethToken);\\r\\n        require(\\r\\n            tokens.isVerifiedToken(_token),\\r\\n            \\\"Token not verified on Exchange\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            tokens.balanceOf(_token, msg.sender) -\\r\\n                tokens.getlockedFunds(msg.sender, _token) >=\\r\\n                _amount,\\r\\n            \\\"Insufficient Tokens to withdraw\\\"\\r\\n        );\\r\\n        require(!locked, \\\"Reentrant call detected!\\\");\\r\\n        locked = true;\\r\\n\\r\\n        tokens.updateBalance(_token, msg.sender, _amount, false);\\r\\n        token = IERC20(_token);\\r\\n        require(token.transfer(msg.sender, _amount));\\r\\n        locked = false;\\r\\n        emit Withdraw(\\r\\n            _token,\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            tokens.balanceOf(_token, msg.sender)\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3f3d703edd7e984e03ed2bc2e8b5533d1a7f820d1d7e1ea3ea9db08e1096a8a8\",\"license\":\"MIT\"},\"contracts/testUSDC.sol\":{\"content\":\"/* ERC 20 constructor takes in 2 strings, feel free to change the first string to the name of your token name, and the second string to the corresponding symbol for your custom token name */\\r\\n// SPDX-License-Identifier: MIT\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract testUSDC is ERC20 {\\r\\n    constructor(uint256 _initial_supply) ERC20(\\\"testUSDC\\\", \\\"tUSDC\\\") {\\r\\n        _mint(msg.sender, _initial_supply);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9155e702cd4b3503ebb8d940ec34f3b04aad990f7d9417e9616f179e1a6a32bd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200005357600080fd5b5060405162001ebc38038062001ebc8339818101604052810190620000799190620001fb565b620000996200008d6200011860201b60201c565b6200012060201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000280565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001f58162000266565b92915050565b60006020828403121562000214576200021362000261565b5b60006200022484828501620001e4565b91505092915050565b60006200023a8262000241565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b62000271816200022d565b81146200027d57600080fd5b50565b60805160601c611c1d6200029f6000396000610be10152611c1d6000f3fe6080604052600436106100865760003560e01c80639e281a98116100595780639e281a9814610121578063b4a99a4e1461014a578063f14210a614610175578063f2fde38b1461019e578063f6326fb3146101c757610086565b8063338b5dea1461008b578063715018a6146100b45780637bf1a627146100cb5780638da5cb5b146100f6575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190611539565b6101d1565b005b3480156100c057600080fd5b506100c9610592565b005b3480156100d757600080fd5b506100e06105a6565b6040516100ed919061175a565b60405180910390f35b34801561010257600080fd5b5061010b6105cc565b604051610118919061175a565b60405180910390f35b34801561012d57600080fd5b5061014860048036038101906101439190611539565b6105f5565b005b34801561015657600080fd5b5061015f610bdf565b60405161016c919061175a565b60405180910390f35b34801561018157600080fd5b5061019c600480360381019061019791906115a6565b610c03565b005b3480156101aa57600080fd5b506101c560048036038101906101c0919061150c565b611105565b005b6101cf611189565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561022c57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631027b219836040518263ffffffff1660e01b8152600401610287919061175a565b60206040518083038186803b15801561029f57600080fd5b505afa1580156102b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d79190611579565b610316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030d90611908565b60405180910390fd5b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016103b69392919061179e565b602060405180830381600087803b1580156103d057600080fd5b505af11580156103e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104089190611579565b61041157600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5ab460283338460016040518563ffffffff1660e01b815260040161047394939291906117d5565b600060405180830381600087803b15801561048d57600080fd5b505af11580156104a1573d6000803e3d6000fd5b505050507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7823383600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7888aec87336040518363ffffffff1660e01b8152600401610526929190611775565b60206040518083038186803b15801561053e57600080fd5b505afa158015610552573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057691906115d3565b604051610586949392919061181a565b60405180910390a15050565b61059a61136e565b6105a460006113ec565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561065057600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631027b219836040518263ffffffff1660e01b81526004016106ab919061175a565b60206040518083038186803b1580156106c357600080fd5b505afa1580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb9190611579565b61073a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073190611908565b60405180910390fd5b80600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fc121db33856040518363ffffffff1660e01b8152600401610798929190611775565b60206040518083038186803b1580156107b057600080fd5b505afa1580156107c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e891906115d3565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7888aec85336040518363ffffffff1660e01b8152600401610845929190611775565b60206040518083038186803b15801561085d57600080fd5b505afa158015610871573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089591906115d3565b61089f9190611984565b10156108e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d790611948565b60405180910390fd5b600060149054906101000a900460ff1615610930576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092790611888565b60405180910390fd5b6001600060146101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5ab460283338460006040518563ffffffff1660e01b81526004016109ad94939291906117d5565b600060405180830381600087803b1580156109c757600080fd5b505af11580156109db573d6000803e3d6000fd5b5050505081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610a7d92919061185f565b602060405180830381600087803b158015610a9757600080fd5b505af1158015610aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acf9190611579565b610ad857600080fd5b60008060146101000a81548160ff0219169083151502179055507ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567823383600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7888aec87336040518363ffffffff1660e01b8152600401610b73929190611775565b60206040518083038186803b158015610b8b57600080fd5b505afa158015610b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc391906115d3565b604051610bd3949392919061181a565b60405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000081565b80600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fc121db33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610c83929190611775565b60206040518083038186803b158015610c9b57600080fd5b505afa158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd391906115d3565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7888aec600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336040518363ffffffff1660e01b8152600401610d52929190611775565b60206040518083038186803b158015610d6a57600080fd5b505afa158015610d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da291906115d3565b610dac9190611984565b1015610ded576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de4906118e8565b60405180910390fd5b600060149054906101000a900460ff1615610e3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3490611888565b60405180910390fd5b6001600060146101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5ab4602600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338460006040518563ffffffff1660e01b8152600401610edc94939291906117d5565b600060405180830381600087803b158015610ef657600080fd5b505af1158015610f0a573d6000803e3d6000fd5b5050505060008060146101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610f4e90611745565b60006040518083038185875af1925050503d8060008114610f8b576040519150601f19603f3d011682016040523d82523d6000602084013e610f90565b606091505b5050905080610fd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcb906118c8565b60405180910390fd5b7ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163384600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7888aec600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336040518363ffffffff1660e01b8152600401611099929190611775565b60206040518083038186803b1580156110b157600080fd5b505afa1580156110c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e991906115d3565b6040516110f9949392919061181a565b60405180910390a15050565b61110d61136e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561117d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611174906118a8565b60405180910390fd5b611186816113ec565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5ab4602600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333460016040518563ffffffff1660e01b815260040161120d94939291906117d5565b600060405180830381600087803b15801561122757600080fd5b505af115801561123b573d6000803e3d6000fd5b505050507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163334600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7888aec600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336040518363ffffffff1660e01b8152600401611304929190611775565b60206040518083038186803b15801561131c57600080fd5b505afa158015611330573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135491906115d3565b604051611364949392919061181a565b60405180910390a1565b6113766114b0565b73ffffffffffffffffffffffffffffffffffffffff166113946105cc565b73ffffffffffffffffffffffffffffffffffffffff16146113ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e190611928565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000813590506114c781611ba2565b92915050565b6000815190506114dc81611bb9565b92915050565b6000813590506114f181611bd0565b92915050565b60008151905061150681611bd0565b92915050565b60006020828403121561152257611521611a2f565b5b6000611530848285016114b8565b91505092915050565b600080604083850312156115505761154f611a2f565b5b600061155e858286016114b8565b925050602061156f858286016114e2565b9150509250929050565b60006020828403121561158f5761158e611a2f565b5b600061159d848285016114cd565b91505092915050565b6000602082840312156115bc576115bb611a2f565b5b60006115ca848285016114e2565b91505092915050565b6000602082840312156115e9576115e8611a2f565b5b60006115f7848285016114f7565b91505092915050565b611609816119b8565b82525050565b611618816119ca565b82525050565b600061162b601883611973565b915061163682611a34565b602082019050919050565b600061164e602683611973565b915061165982611a5d565b604082019050919050565b6000611671601583611973565b915061167c82611aac565b602082019050919050565b6000611694602483611973565b915061169f82611ad5565b604082019050919050565b60006116b7601e83611973565b91506116c282611b24565b602082019050919050565b60006116da602083611973565b91506116e582611b4d565b602082019050919050565b60006116fd601f83611973565b915061170882611b76565b602082019050919050565b6000611720600083611968565b915061172b82611b9f565b600082019050919050565b61173f816119f6565b82525050565b600061175082611713565b9150819050919050565b600060208201905061176f6000830184611600565b92915050565b600060408201905061178a6000830185611600565b6117976020830184611600565b9392505050565b60006060820190506117b36000830186611600565b6117c06020830185611600565b6117cd6040830184611736565b949350505050565b60006080820190506117ea6000830187611600565b6117f76020830186611600565b6118046040830185611736565b611811606083018461160f565b95945050505050565b600060808201905061182f6000830187611600565b61183c6020830186611600565b6118496040830185611736565b6118566060830184611736565b95945050505050565b60006040820190506118746000830185611600565b6118816020830184611736565b9392505050565b600060208201905081810360008301526118a18161161e565b9050919050565b600060208201905081810360008301526118c181611641565b9050919050565b600060208201905081810360008301526118e181611664565b9050919050565b6000602082019050818103600083015261190181611687565b9050919050565b60006020820190508181036000830152611921816116aa565b9050919050565b60006020820190508181036000830152611941816116cd565b9050919050565b60006020820190508181036000830152611961816116f0565b9050919050565b600081905092915050565b600082825260208201905092915050565b600061198f826119f6565b915061199a836119f6565b9250828210156119ad576119ac611a00565b5b828203905092915050565b60006119c3826119d6565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f5265656e7472616e742063616c6c206465746563746564210000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f6661696c656420746f2073656e6420616d6f756e740000000000000000000000600082015250565b7f496e73756666696369656e742062616c616e63652045544820746f207769746860008201527f6472617700000000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e206e6f74207665726966696564206f6e2045786368616e67650000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e73756666696369656e7420546f6b656e7320746f20776974686472617700600082015250565b50565b611bab816119b8565b8114611bb657600080fd5b50565b611bc2816119ca565b8114611bcd57600080fd5b50565b611bd9816119f6565b8114611be457600080fd5b5056fea2646970667358221220c6ec101ce0d5479a47a4b61918a09c3859c9fc33835608690963c671b23c533064736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80639e281a98116100595780639e281a9814610121578063b4a99a4e1461014a578063f14210a614610175578063f2fde38b1461019e578063f6326fb3146101c757610086565b8063338b5dea1461008b578063715018a6146100b45780637bf1a627146100cb5780638da5cb5b146100f6575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190611539565b6101d1565b005b3480156100c057600080fd5b506100c9610592565b005b3480156100d757600080fd5b506100e06105a6565b6040516100ed919061175a565b60405180910390f35b34801561010257600080fd5b5061010b6105cc565b604051610118919061175a565b60405180910390f35b34801561012d57600080fd5b5061014860048036038101906101439190611539565b6105f5565b005b34801561015657600080fd5b5061015f610bdf565b60405161016c919061175a565b60405180910390f35b34801561018157600080fd5b5061019c600480360381019061019791906115a6565b610c03565b005b3480156101aa57600080fd5b506101c560048036038101906101c0919061150c565b611105565b005b6101cf611189565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561022c57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631027b219836040518263ffffffff1660e01b8152600401610287919061175a565b60206040518083038186803b15801561029f57600080fd5b505afa1580156102b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d79190611579565b610316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030d90611908565b60405180910390fd5b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016103b69392919061179e565b602060405180830381600087803b1580156103d057600080fd5b505af11580156103e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104089190611579565b61041157600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5ab460283338460016040518563ffffffff1660e01b815260040161047394939291906117d5565b600060405180830381600087803b15801561048d57600080fd5b505af11580156104a1573d6000803e3d6000fd5b505050507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7823383600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7888aec87336040518363ffffffff1660e01b8152600401610526929190611775565b60206040518083038186803b15801561053e57600080fd5b505afa158015610552573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057691906115d3565b604051610586949392919061181a565b60405180910390a15050565b61059a61136e565b6105a460006113ec565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561065057600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631027b219836040518263ffffffff1660e01b81526004016106ab919061175a565b60206040518083038186803b1580156106c357600080fd5b505afa1580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb9190611579565b61073a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073190611908565b60405180910390fd5b80600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fc121db33856040518363ffffffff1660e01b8152600401610798929190611775565b60206040518083038186803b1580156107b057600080fd5b505afa1580156107c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e891906115d3565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7888aec85336040518363ffffffff1660e01b8152600401610845929190611775565b60206040518083038186803b15801561085d57600080fd5b505afa158015610871573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089591906115d3565b61089f9190611984565b10156108e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d790611948565b60405180910390fd5b600060149054906101000a900460ff1615610930576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092790611888565b60405180910390fd5b6001600060146101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5ab460283338460006040518563ffffffff1660e01b81526004016109ad94939291906117d5565b600060405180830381600087803b1580156109c757600080fd5b505af11580156109db573d6000803e3d6000fd5b5050505081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610a7d92919061185f565b602060405180830381600087803b158015610a9757600080fd5b505af1158015610aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acf9190611579565b610ad857600080fd5b60008060146101000a81548160ff0219169083151502179055507ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567823383600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7888aec87336040518363ffffffff1660e01b8152600401610b73929190611775565b60206040518083038186803b158015610b8b57600080fd5b505afa158015610b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc391906115d3565b604051610bd3949392919061181a565b60405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000081565b80600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fc121db33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610c83929190611775565b60206040518083038186803b158015610c9b57600080fd5b505afa158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd391906115d3565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7888aec600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336040518363ffffffff1660e01b8152600401610d52929190611775565b60206040518083038186803b158015610d6a57600080fd5b505afa158015610d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da291906115d3565b610dac9190611984565b1015610ded576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de4906118e8565b60405180910390fd5b600060149054906101000a900460ff1615610e3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3490611888565b60405180910390fd5b6001600060146101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5ab4602600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338460006040518563ffffffff1660e01b8152600401610edc94939291906117d5565b600060405180830381600087803b158015610ef657600080fd5b505af1158015610f0a573d6000803e3d6000fd5b5050505060008060146101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610f4e90611745565b60006040518083038185875af1925050503d8060008114610f8b576040519150601f19603f3d011682016040523d82523d6000602084013e610f90565b606091505b5050905080610fd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcb906118c8565b60405180910390fd5b7ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163384600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7888aec600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336040518363ffffffff1660e01b8152600401611099929190611775565b60206040518083038186803b1580156110b157600080fd5b505afa1580156110c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e991906115d3565b6040516110f9949392919061181a565b60405180910390a15050565b61110d61136e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561117d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611174906118a8565b60405180910390fd5b611186816113ec565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5ab4602600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333460016040518563ffffffff1660e01b815260040161120d94939291906117d5565b600060405180830381600087803b15801561122757600080fd5b505af115801561123b573d6000803e3d6000fd5b505050507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163334600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7888aec600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336040518363ffffffff1660e01b8152600401611304929190611775565b60206040518083038186803b15801561131c57600080fd5b505afa158015611330573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135491906115d3565b604051611364949392919061181a565b60405180910390a1565b6113766114b0565b73ffffffffffffffffffffffffffffffffffffffff166113946105cc565b73ffffffffffffffffffffffffffffffffffffffff16146113ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e190611928565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000813590506114c781611ba2565b92915050565b6000815190506114dc81611bb9565b92915050565b6000813590506114f181611bd0565b92915050565b60008151905061150681611bd0565b92915050565b60006020828403121561152257611521611a2f565b5b6000611530848285016114b8565b91505092915050565b600080604083850312156115505761154f611a2f565b5b600061155e858286016114b8565b925050602061156f858286016114e2565b9150509250929050565b60006020828403121561158f5761158e611a2f565b5b600061159d848285016114cd565b91505092915050565b6000602082840312156115bc576115bb611a2f565b5b60006115ca848285016114e2565b91505092915050565b6000602082840312156115e9576115e8611a2f565b5b60006115f7848285016114f7565b91505092915050565b611609816119b8565b82525050565b611618816119ca565b82525050565b600061162b601883611973565b915061163682611a34565b602082019050919050565b600061164e602683611973565b915061165982611a5d565b604082019050919050565b6000611671601583611973565b915061167c82611aac565b602082019050919050565b6000611694602483611973565b915061169f82611ad5565b604082019050919050565b60006116b7601e83611973565b91506116c282611b24565b602082019050919050565b60006116da602083611973565b91506116e582611b4d565b602082019050919050565b60006116fd601f83611973565b915061170882611b76565b602082019050919050565b6000611720600083611968565b915061172b82611b9f565b600082019050919050565b61173f816119f6565b82525050565b600061175082611713565b9150819050919050565b600060208201905061176f6000830184611600565b92915050565b600060408201905061178a6000830185611600565b6117976020830184611600565b9392505050565b60006060820190506117b36000830186611600565b6117c06020830185611600565b6117cd6040830184611736565b949350505050565b60006080820190506117ea6000830187611600565b6117f76020830186611600565b6118046040830185611736565b611811606083018461160f565b95945050505050565b600060808201905061182f6000830187611600565b61183c6020830186611600565b6118496040830185611736565b6118566060830184611736565b95945050505050565b60006040820190506118746000830185611600565b6118816020830184611736565b9392505050565b600060208201905081810360008301526118a18161161e565b9050919050565b600060208201905081810360008301526118c181611641565b9050919050565b600060208201905081810360008301526118e181611664565b9050919050565b6000602082019050818103600083015261190181611687565b9050919050565b60006020820190508181036000830152611921816116aa565b9050919050565b60006020820190508181036000830152611941816116cd565b9050919050565b60006020820190508181036000830152611961816116f0565b9050919050565b600081905092915050565b600082825260208201905092915050565b600061198f826119f6565b915061199a836119f6565b9250828210156119ad576119ac611a00565b5b828203905092915050565b60006119c3826119d6565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f5265656e7472616e742063616c6c206465746563746564210000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f6661696c656420746f2073656e6420616d6f756e740000000000000000000000600082015250565b7f496e73756666696369656e742062616c616e63652045544820746f207769746860008201527f6472617700000000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e206e6f74207665726966696564206f6e2045786368616e67650000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e73756666696369656e7420546f6b656e7320746f20776974686472617700600082015250565b50565b611bab816119b8565b8114611bb657600080fd5b50565b611bc2816119ca565b8114611bcd57600080fd5b50565b611bd9816119f6565b8114611be457600080fd5b5056fea2646970667358221220c6ec101ce0d5479a47a4b61918a09c3859c9fc33835608690963c671b23c533064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Withdraw(address,address,uint256,uint256)": {
        "notice": "Event when amount withdrawn exchange"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/Wallet.sol:Wallet",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2737,
        "contract": "contracts/Wallet.sol:Wallet",
        "label": "locked",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2743,
        "contract": "contracts/Wallet.sol:Wallet",
        "label": "ethToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2746,
        "contract": "contracts/Wallet.sol:Wallet",
        "label": "tokens",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Exchange)2720"
      },
      {
        "astId": 2749,
        "contract": "contracts/Wallet.sol:Wallet",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)236"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Exchange)2720": {
        "encoding": "inplace",
        "label": "contract Exchange",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)236": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      }
    }
  }
}