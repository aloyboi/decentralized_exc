{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Fill",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Exchange.Side",
          "name": "side",
          "type": "uint8"
        }
      ],
      "name": "Order",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Exchange.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "createLimitBuyOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "createLimitSellOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Exchange.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "fillOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFilledOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getFilledOrderLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "enum Exchange.Side",
          "name": "side",
          "type": "uint8"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "enum Exchange.Side",
              "name": "side",
              "type": "uint8"
            }
          ],
          "internalType": "struct Exchange._Order[]",
          "name": "_order",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getOrderFromArray",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "enum Exchange.Side",
              "name": "side",
              "type": "uint8"
            }
          ],
          "internalType": "struct Exchange._Order",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Exchange.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getOrderLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getlockedFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isVerifiedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "enum Exchange.Side",
          "name": "side",
          "type": "uint8"
        }
      ],
      "name": "matchOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_filledOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "enum Exchange.Side",
          "name": "side",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_orderBook",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "enum Exchange.Side",
          "name": "side",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_orderId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_tokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isAdd",
          "type": "bool"
        }
      ],
      "name": "updateBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isAdd",
          "type": "bool"
        }
      ],
      "name": "updateLockedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7030e0c6e882ee0e356beaff14e3313407f5c0f01135cf562150591be6a4a112",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "4382236",
    "logsBloom": "0x
    "blockHash": "0x44586f83bb6353506129c0877995d6f9fc80c8f1846a4e41722f446e1ed8bf8f",
    "transactionHash": "0x7030e0c6e882ee0e356beaff14e3313407f5c0f01135cf562150591be6a4a112",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x7030e0c6e882ee0e356beaff14e3313407f5c0f01135cf562150591be6a4a112",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x44586f83bb6353506129c0877995d6f9fc80c8f1846a4e41722f446e1ed8bf8f"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "4382236",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
  ],
  "numDeployments": 1,
  "solcInputHash": "4fd0718f90c713497cfe67ac44e8446a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Fill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createLimitBuyOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createLimitSellOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFilledOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFilledOrderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"internalType\":\"struct Exchange._Order[]\",\"name\":\"_order\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOrderFromArray\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"internalType\":\"struct Exchange._Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getOrderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getlockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isVerifiedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"matchOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_filledOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_orderBook\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_orderId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"updateBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"updateLockedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Cancel(uint256,address,address,uint256,uint256)\":{\"notice\":\"Event when an order is cancelled\"},\"Order(uint256,address,address,uint256,uint256,uint8)\":{\"notice\":\"Event when an order is placed on an exchange\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(\\r\\n            fromBalance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n            // decrementing then incrementing.\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        unchecked {\\r\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(\\r\\n                currentAllowance >= amount,\\r\\n                \\\"ERC20: insufficient allowance\\\"\\r\\n            );\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x2ce1eba6311b6b8d11599153d655be08c43ce6a99eed22581d3673f88c95f9e1\",\"license\":\"MIT\"},\"contracts/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./testUSDC.sol\\\";\\r\\nimport \\\"./Wallet.sol\\\";\\r\\n\\r\\n/// @notice Library SafeMath used to prevent overflows and underflows\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Exchange is Ownable {\\r\\n    using SafeMath for uint256; //for prevention of integer overflow\\r\\n\\r\\n    address public immutable Owner;\\r\\n    address usdc;\\r\\n    address public ethToken = address(0);\\r\\n    uint256 decimals = 10**18;\\r\\n\\r\\n    //Token Address List available in DEX\\r\\n    address[] public tokenList;\\r\\n\\r\\n    //s_orderBook mappping: tokenAddress -> Side -> Order Array\\r\\n    mapping(address => mapping(uint256 => _Order[])) public s_orderBook;\\r\\n\\r\\n    //Balance in DEX\\r\\n    mapping(address => mapping(address => uint256)) public s_tokens; //tokenAdress -> msg.sender -> tokenAmt\\r\\n\\r\\n    //Locked value in orders in DEX  user->Token->lockedAmount\\r\\n    mapping(address => mapping(address => uint256)) public lockedFunds;\\r\\n\\r\\n    mapping(address => _Order[]) public s_filledOrders;\\r\\n\\r\\n    uint256 public s_orderId = 0;\\r\\n    bool private s_isManual = true;\\r\\n\\r\\n    //Structs representing an order has unique id, user and amounts to give and get between two s_tokens to exchange\\r\\n    struct _Order {\\r\\n        uint256 id;\\r\\n        address user;\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n        uint256 price; //in usdc\\r\\n        Side side;\\r\\n    }\\r\\n\\r\\n    enum Side {\\r\\n        BUY,\\r\\n        SELL\\r\\n    }\\r\\n\\r\\n    //add events\\r\\n    /// @notice Event when an order is placed on an exchange\\r\\n    event Order(\\r\\n        uint256 id,\\r\\n        address user,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 price,\\r\\n        Side side\\r\\n    );\\r\\n\\r\\n    /// @notice Event when an order is cancelled\\r\\n    event Cancel(\\r\\n        uint256 id,\\r\\n        address user,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    event Fill(\\r\\n        uint256 id,\\r\\n        address user,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    constructor(address _usdc) {\\r\\n        usdc = _usdc;\\r\\n        addToken(usdc);\\r\\n        addToken(ethToken);\\r\\n\\r\\n        Owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    //For Buyer, when making buy order they deposit usdc and receive token of choice\\r\\n    //For seller, when making sell order, they deposit token of choice and receive usdc\\r\\n    function createLimitBuyOrder(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint256 _price //in usdc/token\\r\\n    ) external {\\r\\n        //Token must be approved in DEX\\r\\n        require(isVerifiedToken(_token), \\\"Token unavailable in DEX\\\");\\r\\n\\r\\n        //Our Exchange does not allow buying of USDC\\r\\n        require(_token != usdc, \\\"Unable to purchase USDC\\\");\\r\\n\\r\\n        uint256 totalValue = (_amount.mul(_price)).div(decimals);\\r\\n\\r\\n        //Amount user has deposited in the DEX must be >= value he wants to buy\\r\\n        require(\\r\\n            balanceOf(usdc, msg.sender) - getlockedFunds(msg.sender, usdc) >=\\r\\n                totalValue,\\r\\n            \\\"Insufficient USDC\\\"\\r\\n        );\\r\\n\\r\\n        //Lock the funds (USDC) in the wallet by removing balance in DEX\\r\\n        updateLockedFunds(msg.sender, usdc, totalValue, true);\\r\\n\\r\\n        s_orderBook[_token][uint256(Side.BUY)].push(\\r\\n            _Order(s_orderId, msg.sender, _token, _amount, _price, Side.BUY)\\r\\n        );\\r\\n\\r\\n        emit Order(s_orderId, msg.sender, _token, _amount, _price, Side.BUY);\\r\\n\\r\\n        s_orderId = s_orderId.add(1);\\r\\n    }\\r\\n\\r\\n    function createLimitSellOrder(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint256 _price //in usdc/token\\r\\n    ) external {\\r\\n        //Token must be approved in DEX\\r\\n        require(isVerifiedToken(_token), \\\"Token unavailable in DEX\\\");\\r\\n\\r\\n        //Our Exchange does not allow buying of USDC\\r\\n        require(_token != usdc, \\\"Unable to sell USDC\\\");\\r\\n\\r\\n        //Amount of tokens user deposit in DEX must be >= the amount of tokens they want to sell\\r\\n        require(\\r\\n            balanceOf(_token, msg.sender) -\\r\\n                getlockedFunds(msg.sender, _token) >=\\r\\n                _amount,\\r\\n            \\\"Insufficient tokens\\\"\\r\\n        );\\r\\n\\r\\n        //Lock the funds (tokens) in the wallet\\r\\n        updateLockedFunds(msg.sender, _token, _amount, true);\\r\\n\\r\\n        s_orderBook[_token][uint256(Side.SELL)].push(\\r\\n            _Order(s_orderId, msg.sender, _token, _amount, _price, Side.SELL)\\r\\n        );\\r\\n\\r\\n        emit Order(s_orderId, msg.sender, _token, _amount, _price, Side.SELL);\\r\\n\\r\\n        s_orderId = s_orderId.add(1);\\r\\n    }\\r\\n\\r\\n    function cancelOrder(\\r\\n        Side side,\\r\\n        uint256 _id,\\r\\n        address _token\\r\\n    ) public {\\r\\n        require(_id >= 0 && _id <= s_orderId, \\\"Invalid Order ID\\\");\\r\\n        require(isVerifiedToken(_token), \\\"Token unavailable in DEX\\\");\\r\\n\\r\\n        _Order[] storage _order = s_orderBook[_token][uint256(side)];\\r\\n        uint256 size = _order.length;\\r\\n        _Order memory order;\\r\\n\\r\\n        uint256 index;\\r\\n        for (uint256 i = 0; i < size; i++) {\\r\\n            if (_order[i].id == _id) {\\r\\n                index = i;\\r\\n                order = _order[i];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //Manual cancellation of orders\\r\\n        if (s_isManual) {\\r\\n            require(msg.sender == order.user, \\\"Not Order Owner\\\");\\r\\n\\r\\n            //Unlock funds\\r\\n            if (side == Side.BUY) {\\r\\n                updateLockedFunds(\\r\\n                    msg.sender,\\r\\n                    usdc,\\r\\n                    (order.price.mul(order.amount)).div(decimals),\\r\\n                    false\\r\\n                );\\r\\n            } else if (side == Side.SELL) {\\r\\n                updateLockedFunds(msg.sender, _token, order.amount, false);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint256 j = index; j < size - 1; j++) {\\r\\n            _order[j] = _order[j + 1];\\r\\n        }\\r\\n        delete _order[size - 1];\\r\\n        _order.pop();\\r\\n\\r\\n        s_orderBook[_token][uint256(side)] = _order;\\r\\n\\r\\n        emit Cancel(order.id, msg.sender, _token, order.amount, order.price);\\r\\n    }\\r\\n\\r\\n    function fillOrder(\\r\\n        Side side,\\r\\n        uint256 _id,\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint256 _price\\r\\n    ) public {\\r\\n        require(_id >= 0 && _id <= s_orderId);\\r\\n        _Order[] memory _order = s_orderBook[_token][uint256(side)];\\r\\n        _Order memory order;\\r\\n\\r\\n        order = getOrderFromArray(_order, _id);\\r\\n\\r\\n        require(order.amount >= _amount);\\r\\n\\r\\n        order.amount = order.amount.sub(_amount);\\r\\n\\r\\n        if (side == Side.BUY) {\\r\\n            updateLockedFunds(\\r\\n                order.user,\\r\\n                usdc,\\r\\n                (order.price.mul(_amount)).div(decimals),\\r\\n                false\\r\\n            );\\r\\n        } else if (side == Side.SELL) {\\r\\n            updateLockedFunds(order.user, _token, _amount, false);\\r\\n        }\\r\\n\\r\\n        emit Fill(_id, order.user, _token, _amount, _price);\\r\\n\\r\\n        if (order.amount == 0) {\\r\\n            s_filledOrders[order.user].push(order);\\r\\n            s_isManual = false;\\r\\n            cancelOrder(side, order.id, order.token); //remove filled orders\\r\\n            s_isManual = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function matchOrders(\\r\\n        address _token,\\r\\n        uint256 _id,\\r\\n        Side side\\r\\n    ) external {\\r\\n        //when order is filled,\\r\\n        //BUY Side => deduct USDC from balance, sent token to balance, order updated.\\r\\n        //SELL Side =>deduct token from balance, sent USDC from DEX, order updated.\\r\\n        uint256 saleTokenAmt;\\r\\n        //Token must be approved in DEX\\r\\n        require(isVerifiedToken(_token), \\\"Token unavailable in DEX\\\");\\r\\n        require(_id >= 0 && _id <= s_orderId);\\r\\n\\r\\n        if (side == Side.BUY) {\\r\\n            //Retrieve buy order to be filled\\r\\n            _Order[] memory _order = s_orderBook[_token][0];\\r\\n            _Order memory buyOrderToFill = getOrderFromArray(_order, _id);\\r\\n\\r\\n            //Retrieve sell order to match\\r\\n            _Order[] memory _sellOrder = s_orderBook[_token][1];\\r\\n            for (uint256 i = 0; i < _sellOrder.length; i++) {\\r\\n                //sell order hit buyer's limit price\\r\\n                if (_sellOrder[i].price <= buyOrderToFill.price) {\\r\\n                    _Order memory sellOrder = _sellOrder[i];\\r\\n                    //if buyer's amount to buy > seller's amount to sell\\r\\n                    if (buyOrderToFill.amount > sellOrder.amount) {\\r\\n                        saleTokenAmt = sellOrder.amount;\\r\\n                    }\\r\\n                    //if seller's amount to sell >= buyer's amount to buy\\r\\n                    else if (buyOrderToFill.amount <= sellOrder.amount) {\\r\\n                        saleTokenAmt = buyOrderToFill.amount;\\r\\n                    }\\r\\n\\r\\n                    //Verify current balance\\r\\n                    require(\\r\\n                        balanceOf(usdc, buyOrderToFill.user) >=\\r\\n                            (saleTokenAmt.mul(sellOrder.price)).div(decimals),\\r\\n                        \\\"Insufficient buyer USDC Balance\\\"\\r\\n                    );\\r\\n                    require(\\r\\n                        balanceOf(_token, sellOrder.user) >= saleTokenAmt,\\r\\n                        \\\"Insufficient seller Token Balance\\\"\\r\\n                    );\\r\\n\\r\\n                    //update orders\\r\\n                    fillOrder(\\r\\n                        Side.BUY,\\r\\n                        _id,\\r\\n                        _token,\\r\\n                        saleTokenAmt,\\r\\n                        sellOrder.price\\r\\n                    );\\r\\n                    fillOrder(\\r\\n                        Side.SELL,\\r\\n                        sellOrder.id,\\r\\n                        _token,\\r\\n                        saleTokenAmt,\\r\\n                        sellOrder.price\\r\\n                    );\\r\\n\\r\\n                    //buyer update\\r\\n                    updateBalance(\\r\\n                        _token,\\r\\n                        buyOrderToFill.user,\\r\\n                        saleTokenAmt,\\r\\n                        true\\r\\n                    );\\r\\n                    updateBalance(\\r\\n                        usdc,\\r\\n                        buyOrderToFill.user,\\r\\n                        (sellOrder.price.mul(saleTokenAmt)).div(decimals),\\r\\n                        false\\r\\n                    );\\r\\n\\r\\n                    //seller update\\r\\n                    updateBalance(_token, sellOrder.user, saleTokenAmt, false);\\r\\n                    updateBalance(\\r\\n                        usdc,\\r\\n                        sellOrder.user,\\r\\n                        (sellOrder.price.mul(saleTokenAmt)).div(decimals),\\r\\n                        true\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                if (buyOrderToFill.amount == 0) break;\\r\\n            }\\r\\n        } else if (side == Side.SELL) {\\r\\n            //Retrieve sell order to be filled\\r\\n            _Order[] memory _order = s_orderBook[_token][1];\\r\\n            _Order memory sellOrderToFill = getOrderFromArray(_order, _id);\\r\\n\\r\\n            //Retrieve buy order to match\\r\\n            _Order[] memory _buyOrder = s_orderBook[_token][0];\\r\\n            for (uint256 i = 0; i < _buyOrder.length; i++) {\\r\\n                //sell order hit buyer's limit price\\r\\n                if (_buyOrder[i].price >= sellOrderToFill.price) {\\r\\n                    _Order memory order = _buyOrder[i];\\r\\n\\r\\n                    //if seller's amount to sell > buyer's amount to buy\\r\\n                    if (sellOrderToFill.amount > order.amount) {\\r\\n                        saleTokenAmt = order.amount;\\r\\n                    }\\r\\n                    //if buyer's amount to buy > seller's amount to sell\\r\\n                    else if (sellOrderToFill.amount <= order.amount) {\\r\\n                        saleTokenAmt = sellOrderToFill.amount;\\r\\n                    }\\r\\n\\r\\n                    //Verify current balance\\r\\n                    require(\\r\\n                        balanceOf(_token, sellOrderToFill.user) >= saleTokenAmt,\\r\\n                        \\\"Insufficient seller Token Balance\\\"\\r\\n                    );\\r\\n                    require(\\r\\n                        balanceOf(usdc, order.user) >=\\r\\n                            (saleTokenAmt.mul(order.price)).div(decimals),\\r\\n                        \\\"Insufficient buyer USDC Balance\\\"\\r\\n                    );\\r\\n\\r\\n                    //update orders\\r\\n                    fillOrder(\\r\\n                        Side.SELL,\\r\\n                        _id,\\r\\n                        _token,\\r\\n                        saleTokenAmt,\\r\\n                        order.price\\r\\n                    );\\r\\n                    fillOrder(\\r\\n                        Side.BUY,\\r\\n                        order.id,\\r\\n                        _token,\\r\\n                        saleTokenAmt,\\r\\n                        order.price\\r\\n                    );\\r\\n\\r\\n                    //seller update\\r\\n                    updateBalance(\\r\\n                        _token,\\r\\n                        sellOrderToFill.user,\\r\\n                        saleTokenAmt,\\r\\n                        false\\r\\n                    );\\r\\n                    updateBalance(\\r\\n                        usdc,\\r\\n                        sellOrderToFill.user,\\r\\n                        (order.price.mul(saleTokenAmt)).div(decimals),\\r\\n                        true\\r\\n                    );\\r\\n\\r\\n                    //buyer update\\r\\n                    updateBalance(_token, order.user, saleTokenAmt, true);\\r\\n                    updateBalance(\\r\\n                        usdc,\\r\\n                        order.user,\\r\\n                        (order.price.mul(saleTokenAmt)).div(decimals),\\r\\n                        false\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                if (sellOrderToFill.amount == 0) break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getOrderLength(Side side, address _token)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return s_orderBook[_token][uint256(side)].length;\\r\\n    }\\r\\n\\r\\n    function getOrder(\\r\\n        address _token,\\r\\n        uint256 index,\\r\\n        Side side\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            address,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        _Order memory order = s_orderBook[_token][uint256(side)][index];\\r\\n        return (\\r\\n            order.id,\\r\\n            order.amount,\\r\\n            order.user,\\r\\n            order.price,\\r\\n            uint256(order.side)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getFilledOrderLength(address _user) public view returns (uint256) {\\r\\n        return s_filledOrders[_user].length;\\r\\n    }\\r\\n\\r\\n    function getFilledOrder(address _user, uint256 index)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            address,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        _Order memory filledOrder = s_filledOrders[_user][index];\\r\\n        return (\\r\\n            filledOrder.id,\\r\\n            filledOrder.amount,\\r\\n            filledOrder.user,\\r\\n            filledOrder.price,\\r\\n            uint256(filledOrder.side)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getOrderFromArray(_Order[] memory _order, uint256 _id)\\r\\n        public\\r\\n        pure\\r\\n        returns (_Order memory)\\r\\n    {\\r\\n        _Order memory order;\\r\\n        for (uint256 i = 0; i < _order.length; i++) {\\r\\n            if (_order[i].id == _id) {\\r\\n                order = _order[i];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return order;\\r\\n    }\\r\\n\\r\\n    //Only for Unit Testing in Local Blockchain\\r\\n    // function orderExists(\\r\\n    //     uint256 _id,\\r\\n    //     Side side,\\r\\n    //     address _token\\r\\n    // ) public view returns (bool) {\\r\\n    //     _Order[] memory orders = s_orderBook[_token][uint256(side)];\\r\\n\\r\\n    //     for (uint256 i = 0; i < orders.length; i++) {\\r\\n    //         if (orders[i].id == _id) {\\r\\n    //             return true;\\r\\n    //         }\\r\\n    //     }\\r\\n    //     return false;\\r\\n    // }\\r\\n\\r\\n    function getlockedFunds(address _user, address _token)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return lockedFunds[_user][_token];\\r\\n    }\\r\\n\\r\\n    function updateLockedFunds(\\r\\n        address _user,\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        bool isAdd\\r\\n    ) public {\\r\\n        if (isAdd) {\\r\\n            lockedFunds[_user][_token] = lockedFunds[_user][_token].add(\\r\\n                _amount\\r\\n            );\\r\\n        } else if (!isAdd) {\\r\\n            lockedFunds[_user][_token] = lockedFunds[_user][_token].sub(\\r\\n                _amount\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //balance of specific tokens in the dex owned by specific user\\r\\n    function balanceOf(address _token, address _user)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return s_tokens[_token][_user];\\r\\n    }\\r\\n\\r\\n    function updateBalance(\\r\\n        address _token,\\r\\n        address _user,\\r\\n        uint256 _amount,\\r\\n        bool isAdd\\r\\n    ) public {\\r\\n        if (isAdd) {\\r\\n            s_tokens[_token][_user] = s_tokens[_token][_user].add(_amount);\\r\\n        } else if (!isAdd) {\\r\\n            s_tokens[_token][_user] = s_tokens[_token][_user].sub(_amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addToken(address _token) public onlyOwner {\\r\\n        address[] memory tokens = tokenList;\\r\\n        bool isAdded = false;\\r\\n        //Cannot be repeated\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            if (tokens[i] == _token) {\\r\\n                isAdded = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(isAdded == false, \\\"Token already verified on DEX!\\\");\\r\\n\\r\\n        tokenList.push(_token);\\r\\n    }\\r\\n\\r\\n    function isVerifiedToken(address _token) public view returns (bool) {\\r\\n        uint256 size = tokenList.length;\\r\\n\\r\\n        for (uint256 i = 0; i < size; i++) {\\r\\n            if (tokenList[i] == _token) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6c9d9db579be3404d0f6f1430bfe2f1517abe70b99538b6d4e7d9c2475ceb785\",\"license\":\"MIT\"},\"contracts/Wallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./testUSDC.sol\\\";\\r\\nimport \\\"./Exchange.sol\\\";\\r\\n\\r\\n/// @notice Library SafeMath used to prevent overflows and underflows\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Wallet is Ownable {\\r\\n    using SafeMath for uint256; //for prevention of integer overflow\\r\\n\\r\\n    address public immutable Owner;\\r\\n\\r\\n    //For prevention of reentrancy\\r\\n    bool private locked;\\r\\n\\r\\n    address public ethToken = address(0);\\r\\n\\r\\n    Exchange tokens;\\r\\n\\r\\n    IERC20 token;\\r\\n\\r\\n    event Deposit(address token, address user, uint256 amount, uint256 balance);\\r\\n\\r\\n    /// @notice Event when amount withdrawn exchange\\r\\n    event Withdraw(\\r\\n        address token,\\r\\n        address user,\\r\\n        uint256 amount,\\r\\n        uint256 balance\\r\\n    );\\r\\n\\r\\n    constructor(address _ExchangeAdd) {\\r\\n        tokens = Exchange(_ExchangeAdd);\\r\\n        Owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function depositETH() external payable {\\r\\n        tokens.updateBalance(ethToken, msg.sender, msg.value, true);\\r\\n\\r\\n        emit Deposit(\\r\\n            ethToken,\\r\\n            msg.sender,\\r\\n            msg.value,\\r\\n            tokens.balanceOf(ethToken, msg.sender)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawETH(uint256 _amount) external {\\r\\n        require(\\r\\n            tokens.balanceOf(ethToken, msg.sender) -\\r\\n                tokens.getlockedFunds(msg.sender, ethToken) >=\\r\\n                _amount,\\r\\n            \\\"Insufficient balance ETH to withdraw\\\"\\r\\n        );\\r\\n        require(!locked, \\\"Reentrant call detected!\\\");\\r\\n        locked = true;\\r\\n        tokens.updateBalance(ethToken, msg.sender, _amount, false);\\r\\n        locked = false;\\r\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\r\\n        require(success, \\\"failed to send amount\\\");\\r\\n\\r\\n        emit Withdraw(\\r\\n            ethToken,\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            tokens.balanceOf(ethToken, msg.sender)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //from and transferFrom is from ERC20 contract\\r\\n    //_token should be an ERC20 token\\r\\n    function depositToken(address _token, uint256 _amount) external {\\r\\n        require(_token != ethToken);\\r\\n        require(\\r\\n            tokens.isVerifiedToken(_token),\\r\\n            \\\"Token not verified on Exchange\\\"\\r\\n        );\\r\\n        //need to add a check to prove that it is an ERC20 token\\r\\n        token = IERC20(_token);\\r\\n\\r\\n        //Requires approval first\\r\\n        require(token.transferFrom(msg.sender, address(this), _amount));\\r\\n        tokens.updateBalance(_token, msg.sender, _amount, true);\\r\\n\\r\\n        emit Deposit(\\r\\n            _token,\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            tokens.balanceOf(_token, msg.sender)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawToken(address _token, uint256 _amount) external {\\r\\n        require(_token != ethToken);\\r\\n        require(\\r\\n            tokens.isVerifiedToken(_token),\\r\\n            \\\"Token not verified on Exchange\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            tokens.balanceOf(_token, msg.sender) -\\r\\n                tokens.getlockedFunds(msg.sender, _token) >=\\r\\n                _amount,\\r\\n            \\\"Insufficient Tokens to withdraw\\\"\\r\\n        );\\r\\n        require(!locked, \\\"Reentrant call detected!\\\");\\r\\n        locked = true;\\r\\n\\r\\n        tokens.updateBalance(_token, msg.sender, _amount, false);\\r\\n        token = IERC20(_token);\\r\\n        require(token.transfer(msg.sender, _amount));\\r\\n        locked = false;\\r\\n        emit Withdraw(\\r\\n            _token,\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            tokens.balanceOf(_token, msg.sender)\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3f3d703edd7e984e03ed2bc2e8b5533d1a7f820d1d7e1ea3ea9db08e1096a8a8\",\"license\":\"MIT\"},\"contracts/testUSDC.sol\":{\"content\":\"/* ERC 20 constructor takes in 2 strings, feel free to change the first string to the name of your token name, and the second string to the corresponding symbol for your custom token name */\\r\\n// SPDX-License-Identifier: MIT\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract testUSDC is ERC20 {\\r\\n    constructor(uint256 _initial_supply) ERC20(\\\"testUSDC\\\", \\\"tUSDC\\\") {\\r\\n        _mint(msg.sender, _initial_supply);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9155e702cd4b3503ebb8d940ec34f3b04aad990f7d9417e9616f179e1a6a32bd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80638da5cb5b116100f9578063cd5d767c11610097578063e947a69511610071578063e947a695146104fd578063f2fde38b1461052d578063f7888aec14610549578063f9242d9a14610579576101a9565b8063cd5d767c1461047d578063d48bfca7146104ad578063da55ac21146104c9576101a9565b80639ead7222116100d35780639ead7222146103e3578063a694ccf114610413578063b4a99a4e14610443578063c5ab460214610461576101a9565b80638da5cb5b1461038b5780639bb08f7c146103a95780639c07ce26146103c5576101a9565b80634fc121db1161016657806375c1cea21161014057806375c1cea2146102ed5780637bf1a6271461030957806382954685146103275780638879a9d314610357576101a9565b80634fc121db1461029757806350b08f5e146102c7578063715018a6146102e3576101a9565b80631027b219146101ae5780631347d60e146101de5780632061da58146101fa57806325faf3391461021657806346a8f8201461024b5780634bdde1cf14610267575b600080fd5b6101c860048036038101906101c39190613c24565b6105ae565b6040516101d59190614218565b60405180910390f35b6101f860048036038101906101f39190613e7a565b610660565b005b610214600480360381019061020f9190613d8b565b610e0e565b005b610230600480360381019061022b9190613cf8565b61118f565b6040516102429695949392919061443c565b60405180910390f35b61026560048036038101906102609190613c91565b611235565b005b610281600480360381019061027c9190613c51565b61146b565b60405161028e91906143ce565b60405180910390f35b6102b160048036038101906102ac9190613c51565b611490565b6040516102be91906143ce565b60405180910390f35b6102e160048036038101906102dc9190613d38565b611517565b005b6102eb612203565b005b61030760048036038101906103029190613d8b565b612217565b005b61031161262b565b60405161031e91906141fd565b60405180910390f35b610341600480360381019061033c9190613c24565b612651565b60405161034e91906143ce565b60405180910390f35b610371600480360381019061036c9190613d38565b61269d565b60405161038295949392919061449d565b60405180910390f35b61039361287b565b6040516103a091906141fd565b60405180910390f35b6103c360048036038101906103be9190613ecd565b6128a4565b005b6103cd612d82565b6040516103da91906143ce565b60405180910390f35b6103fd60048036038101906103f89190613f48565b612d88565b60405161040a91906141fd565b60405180910390f35b61042d60048036038101906104289190613dde565b612dc7565b60405161043a91906143b3565b60405180910390f35b61044b612e49565b60405161045891906141fd565b60405180910390f35b61047b60048036038101906104769190613c91565b612e6d565b005b61049760048036038101906104929190613c51565b6130a3565b6040516104a491906143ce565b60405180910390f35b6104c760048036038101906104c29190613c24565b6130c8565b005b6104e360048036038101906104de9190613cf8565b613282565b6040516104f495949392919061449d565b60405180910390f35b61051760048036038101906105129190613e3a565b61343c565b60405161052491906143ce565b60405180910390f35b61054760048036038101906105429190613c24565b6134ac565b005b610563600480360381019061055e9190613c51565b613530565b60405161057091906143ce565b60405180910390f35b610593600480360381019061058e9190613d8b565b6135b7565b6040516105a59695949392919061443c565b60405180910390f35b600080600480549050905060005b81811015610654578373ffffffffffffffffffffffffffffffffffffffff16600482815481106105ef576105ee61480a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106415760019250505061065b565b808061064c90614705565b9150506105bc565b5060009150505b919050565b6000821015801561067357506009548211155b6106b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a990614253565b60405180910390fd5b6106bb816105ae565b6106fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f190614293565b60405180910390fd5b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008560018111156107505761074f6147ac565b5b8152602001908152602001600020905060008180549050905061077161380c565b600080600090505b838110156108fb57868582815481106107955761079461480a565b5b90600052602060002090600602016000015414156108e8578091508481815481106107c3576107c261480a565b5b90600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660018111156108cb576108ca6147ac565b5b60018111156108dd576108dc6147ac565b5b8152505092506108fb565b80806108f390614705565b915050610779565b50600a60009054906101000a900460ff1615610a5257816020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097a906142f3565b60405180910390fd5b60006001811115610997576109966147ac565b5b8760018111156109aa576109a96147ac565b5b1415610a1257610a0d33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610a066003546109f88760600151886080015161366a90919063ffffffff16565b61368090919063ffffffff16565b6000611235565b610a51565b600180811115610a2557610a246147ac565b5b876001811115610a3857610a376147ac565b5b1415610a5057610a4f338684606001516000611235565b5b5b5b60008190505b600184610a659190614633565b811015610bf95784600182610a7a9190614552565b81548110610a8b57610a8a61480a565b5b9060005260206000209060060201858281548110610aac57610aab61480a565b5b9060005260206000209060060201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201548160030155600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff02191690836001811115610bde57610bdd6147ac565b5b02179055509050508080610bf190614705565b915050610a58565b5083600184610c089190614633565b81548110610c1957610c1861480a565b5b90600052602060002090600602016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000905560048201600090556005820160006101000a81549060ff0219169055505083805480610cb557610cb46147db565b5b60019003818190600052602060002090600602016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000905560048201600090556005820160006101000a81549060ff02191690555050905583600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000896001811115610d9d57610d9c6147ac565b5b8152602001908152602001600020908054610db9929190613880565b507fca5fbf354151ee18d2ff58712c9ed7be34397aa5983abfaf40e2d8485867d9668260000151338785606001518660800151604051610dfd9594939291906143e9565b60405180910390a150505050505050565b610e17836105ae565b610e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4d90614293565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ee7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ede90614373565b60405180910390fd5b81610ef23385611490565b610efc8533613530565b610f069190614633565b1015610f47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3e90614393565b60405180910390fd5b610f543384846001611235565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600180811115610fa857610fa76147ac565b5b81526020019081526020016000206040518060c0016040528060095481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020016001808111156110205761101f6147ac565b5b81525090806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836001811115611123576111226147ac565b5b021790555050507f95f7e844715189eed0317d8f771c63ce13ec6364f48022f3db86baf8ce584b956009543385858560016040516111669695949392919061443c565b60405180910390a1611184600160095461369690919063ffffffff16565b600981905550505050565b600860205281600052604060002081815481106111ab57600080fd5b9060005260206000209060060201600091509150508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050160009054906101000a900460ff16905086565b801561134f576112ca82600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461369690919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611465565b80611464576113e382600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546136ac90919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b50505050565b6007602052816000526040600020602052806000526040600020600091509150505481565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000611522846105ae565b611561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155890614293565b60405180910390fd5b6000831015801561157457506009548311155b61157d57600080fd5b60006001811115611591576115906147ac565b5b8260018111156115a4576115a36147ac565b5b1415611bbf576000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561175357838290600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff16600181111561172e5761172d6147ac565b5b60018111156117405761173f6147ac565b5b815250508152602001906001019061161c565b50505050905060006117658286612dc7565b90506000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561191157838290600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660018111156118ec576118eb6147ac565b5b60018111156118fe576118fd6147ac565b5b81525050815260200190600101906117da565b50505050905060005b8151811015611bb657826080015182828151811061193b5761193a61480a565b5b60200260200101516080015111611b915760008282815181106119615761196061480a565b5b60200260200101519050806060015184606001511115611987578060600151955061199f565b806060015184606001511161199e57836060015195505b5b6119ca6003546119bc83608001518961366a90919063ffffffff16565b61368090919063ffffffff16565b6119fa600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660200151613530565b1015611a3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3290614233565b60405180910390fd5b85611a4a8a8360200151613530565b1015611a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8290614313565b60405180910390fd5b611a9d6000898b8985608001516128a4565b611ab3600182600001518b8985608001516128a4565b611ac4898560200151886001612e6d565b611b21600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560200151611b1a600354611b0c8b876080015161366a90919063ffffffff16565b61368090919063ffffffff16565b6000612e6d565b611b32898260200151886000612e6d565b611b8f600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260200151611b88600354611b7a8b876080015161366a90919063ffffffff16565b61368090919063ffffffff16565b6001612e6d565b505b600083606001511415611ba357611bb6565b8080611bae90614705565b91505061191a565b505050506121fd565b600180811115611bd257611bd16147ac565b5b826001811115611be557611be46147ac565b5b14156121fc576000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611d9557838290600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166001811115611d7057611d6f6147ac565b5b6001811115611d8257611d816147ac565b5b8152505081526020019060010190611c5e565b5050505090506000611da78286612dc7565b90506000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611f5257838290600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166001811115611f2d57611f2c6147ac565b5b6001811115611f3f57611f3e6147ac565b5b8152505081526020019060010190611e1b565b50505050905060005b81518110156121f7578260800151828281518110611f7c57611f7b61480a565b5b602002602001015160800151106121d2576000828281518110611fa257611fa161480a565b5b60200260200101519050806060015184606001511115611fc85780606001519550611fe0565b8060600151846060015111611fdf57836060015195505b5b85611fef8a8660200151613530565b1015612030576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202790614313565b60405180910390fd5b61205b60035461204d83608001518961366a90919063ffffffff16565b61368090919063ffffffff16565b61208b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360200151613530565b10156120cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c390614233565b60405180910390fd5b6120de6001898b8985608001516128a4565b6120f4600082600001518b8985608001516128a4565b612105898560200151886000612e6d565b612162600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856020015161215b60035461214d8b876080015161366a90919063ffffffff16565b61368090919063ffffffff16565b6001612e6d565b612173898260200151886001612e6d565b6121d0600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682602001516121c96003546121bb8b876080015161366a90919063ffffffff16565b61368090919063ffffffff16565b6000612e6d565b505b6000836060015114156121e4576121f7565b80806121ef90614705565b915050611f5b565b505050505b5b50505050565b61220b6136c2565b6122156000613740565b565b612220836105ae565b61225f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225690614293565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156122f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e7906142d3565b60405180910390fd5b600061231960035461230b848661366a90919063ffffffff16565b61368090919063ffffffff16565b90508061234833600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611490565b612374600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633613530565b61237e9190614633565b10156123bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b690614333565b60405180910390fd5b6123ee33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836001611235565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000806001811115612442576124416147ac565b5b81526020019081526020016000206040518060c0016040528060095481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001600060018111156124bb576124ba6147ac565b5b81525090806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908360018111156125be576125bd6147ac565b5b021790555050507f95f7e844715189eed0317d8f771c63ce13ec6364f48022f3db86baf8ce584b956009543386868660006040516126019695949392919061443c565b60405180910390a161261f600160095461369690919063ffffffff16565b60098190555050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600080600080600080600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008860018111156126fa576126f96147ac565b5b8152602001908152602001600020888154811061271a5761271961480a565b5b90600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166001811115612822576128216147ac565b5b6001811115612834576128336147ac565b5b81525050905080600001518160600151826020015183608001518460a001516001811115612865576128646147ac565b5b9550955095509550955050939792965093509350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600084101580156128b757506009548411155b6128c057600080fd5b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000876001811115612916576129156147ac565b5b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015612a7b57838290600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166001811115612a5657612a556147ac565b5b6001811115612a6857612a676147ac565b5b8152505081526020019060010190612944565b505050509050612a8961380c565b612a938287612dc7565b90508381606001511015612aa657600080fd5b612abd8482606001516136ac90919063ffffffff16565b81606001818152505060006001811115612ada57612ad96147ac565b5b876001811115612aed57612aec6147ac565b5b1415612b5557612b508160200151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612b49600354612b3b89876080015161366a90919063ffffffff16565b61368090919063ffffffff16565b6000611235565b612b94565b600180811115612b6857612b676147ac565b5b876001811115612b7b57612b7a6147ac565b5b1415612b9357612b92816020015186866000611235565b5b5b7f6b2a78965102b6dcf63436e21fb398d05a11120cdd8b64e83291405e3387cdf2868260200151878787604051612bcf9594939291906143e9565b60405180910390a1600081606001511415612d795760086000826020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836001811115612d2857612d276147ac565b5b021790555050506000600a60006101000a81548160ff021916908315150217905550612d5d8782600001518360400151610660565b6001600a60006101000a81548160ff0219169083151502179055505b50505050505050565b60095481565b60048181548110612d9857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612dcf61380c565b612dd761380c565b60005b8451811015612e3e5783858281518110612df757612df661480a565b5b6020026020010151600001511415612e2b57848181518110612e1c57612e1b61480a565b5b60200260200101519150612e3e565b8080612e3690614705565b915050612dda565b508091505092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b8015612f8757612f0282600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461369690919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061309d565b8061309c5761301b82600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546136ac90919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b50505050565b6006602052816000526040600020602052806000526040600020600091509150505481565b6130d06136c2565b6000600480548060200260200160405190810160405280929190818152602001828054801561315457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161310a575b505050505090506000805b82518110156131d2578373ffffffffffffffffffffffffffffffffffffffff168382815181106131925761319161480a565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156131bf57600191506131d2565b80806131ca90614705565b91505061315f565b50600015158115151461321a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613211906142b3565b60405180910390fd5b6004839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600080600080600080600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002087815481106132dc576132db61480a565b5b90600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660018111156133e4576133e36147ac565b5b60018111156133f6576133f56147ac565b5b81525050905080600001518160600151826020015183608001518460a001516001811115613427576134266147ac565b5b95509550955095509550509295509295909350565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846001811115613492576134916147ac565b5b815260200190815260200160002080549050905092915050565b6134b46136c2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161351b90614273565b60405180910390fd5b61352d81613740565b50565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600560205282600052604060002060205281600052604060002081815481106135df57600080fd5b906000526020600020906006020160009250925050508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050160009054906101000a900460ff16905086565b6000818361367891906145d9565b905092915050565b6000818361368e91906145a8565b905092915050565b600081836136a49190614552565b905092915050565b600081836136ba9190614633565b905092915050565b6136ca613804565b73ffffffffffffffffffffffffffffffffffffffff166136e861287b565b73ffffffffffffffffffffffffffffffffffffffff161461373e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161373590614353565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000600181111561387a576138796147ac565b5b81525090565b8280548282559060005260206000209060060281019282156139f05760005260206000209160060282015b828111156139ef578282600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201548160030155600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff021916908360018111156139d9576139d86147ac565b5b02179055505050916006019190600601906138ab565b5b5090506139fd9190613a01565b5090565b5b80821115613a8e576000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000905560048201600090556005820160006101000a81549060ff021916905550600601613a02565b5090565b6000613aa5613aa084614515565b6144f0565b905080838252602082019050828560c0860282011115613ac857613ac7614872565b5b60005b85811015613af85781613ade8882613b6f565b845260208401935060c08301925050600181019050613acb565b5050509392505050565b600081359050613b1181614ade565b92915050565b600082601f830112613b2c57613b2b614868565b5b8135613b3c848260208601613a92565b91505092915050565b600081359050613b5481614af5565b92915050565b600081359050613b6981614b0c565b92915050565b600060c08284031215613b8557613b8461486d565b5b613b8f60c06144f0565b90506000613b9f84828501613c0f565b6000830152506020613bb384828501613b02565b6020830152506040613bc784828501613b02565b6040830152506060613bdb84828501613c0f565b6060830152506080613bef84828501613c0f565b60808301525060a0613c0384828501613b5a565b60a08301525092915050565b600081359050613c1e81614b1c565b92915050565b600060208284031215613c3a57613c3961487c565b5b6000613c4884828501613b02565b91505092915050565b60008060408385031215613c6857613c6761487c565b5b6000613c7685828601613b02565b9250506020613c8785828601613b02565b9150509250929050565b60008060008060808587031215613cab57613caa61487c565b5b6000613cb987828801613b02565b9450506020613cca87828801613b02565b9350506040613cdb87828801613c0f565b9250506060613cec87828801613b45565b91505092959194509250565b60008060408385031215613d0f57613d0e61487c565b5b6000613d1d85828601613b02565b9250506020613d2e85828601613c0f565b9150509250929050565b600080600060608486031215613d5157613d5061487c565b5b6000613d5f86828701613b02565b9350506020613d7086828701613c0f565b9250506040613d8186828701613b5a565b9150509250925092565b600080600060608486031215613da457613da361487c565b5b6000613db286828701613b02565b9350506020613dc386828701613c0f565b9250506040613dd486828701613c0f565b9150509250925092565b60008060408385031215613df557613df461487c565b5b600083013567ffffffffffffffff811115613e1357613e12614877565b5b613e1f85828601613b17565b9250506020613e3085828601613c0f565b9150509250929050565b60008060408385031215613e5157613e5061487c565b5b6000613e5f85828601613b5a565b9250506020613e7085828601613b02565b9150509250929050565b600080600060608486031215613e9357613e9261487c565b5b6000613ea186828701613b5a565b9350506020613eb286828701613c0f565b9250506040613ec386828701613b02565b9150509250925092565b600080600080600060a08688031215613ee957613ee861487c565b5b6000613ef788828901613b5a565b9550506020613f0888828901613c0f565b9450506040613f1988828901613b02565b9350506060613f2a88828901613c0f565b9250506080613f3b88828901613c0f565b9150509295509295909350565b600060208284031215613f5e57613f5d61487c565b5b6000613f6c84828501613c0f565b91505092915050565b613f7e81614667565b82525050565b613f8d81614667565b82525050565b613f9c81614679565b82525050565b613fab816146c2565b82525050565b613fba816146c2565b82525050565b6000613fcd601f83614541565b9150613fd882614892565b602082019050919050565b6000613ff0601083614541565b9150613ffb826148bb565b602082019050919050565b6000614013602683614541565b915061401e826148e4565b604082019050919050565b6000614036601883614541565b915061404182614933565b602082019050919050565b6000614059601e83614541565b91506140648261495c565b602082019050919050565b600061407c601783614541565b915061408782614985565b602082019050919050565b600061409f600f83614541565b91506140aa826149ae565b602082019050919050565b60006140c2602183614541565b91506140cd826149d7565b604082019050919050565b60006140e5601183614541565b91506140f082614a26565b602082019050919050565b6000614108602083614541565b915061411382614a4f565b602082019050919050565b600061412b601383614541565b915061413682614a78565b602082019050919050565b600061414e601383614541565b915061415982614aa1565b602082019050919050565b60c08201600082015161417a60008501826141df565b50602082015161418d6020850182613f75565b5060408201516141a06040850182613f75565b5060608201516141b360608501826141df565b5060808201516141c660808501826141df565b5060a08201516141d960a0850182613fa2565b50505050565b6141e8816146b8565b82525050565b6141f7816146b8565b82525050565b60006020820190506142126000830184613f84565b92915050565b600060208201905061422d6000830184613f93565b92915050565b6000602082019050818103600083015261424c81613fc0565b9050919050565b6000602082019050818103600083015261426c81613fe3565b9050919050565b6000602082019050818103600083015261428c81614006565b9050919050565b600060208201905081810360008301526142ac81614029565b9050919050565b600060208201905081810360008301526142cc8161404c565b9050919050565b600060208201905081810360008301526142ec8161406f565b9050919050565b6000602082019050818103600083015261430c81614092565b9050919050565b6000602082019050818103600083015261432c816140b5565b9050919050565b6000602082019050818103600083015261434c816140d8565b9050919050565b6000602082019050818103600083015261436c816140fb565b9050919050565b6000602082019050818103600083015261438c8161411e565b9050919050565b600060208201905081810360008301526143ac81614141565b9050919050565b600060c0820190506143c86000830184614164565b92915050565b60006020820190506143e360008301846141ee565b92915050565b600060a0820190506143fe60008301886141ee565b61440b6020830187613f84565b6144186040830186613f84565b61442560608301856141ee565b61443260808301846141ee565b9695505050505050565b600060c08201905061445160008301896141ee565b61445e6020830188613f84565b61446b6040830187613f84565b61447860608301866141ee565b61448560808301856141ee565b61449260a0830184613fb1565b979650505050505050565b600060a0820190506144b260008301886141ee565b6144bf60208301876141ee565b6144cc6040830186613f84565b6144d960608301856141ee565b6144e660808301846141ee565b9695505050505050565b60006144fa61450b565b905061450682826146d4565b919050565b6000604051905090565b600067ffffffffffffffff8211156145305761452f614839565b5b602082029050602081019050919050565b600082825260208201905092915050565b600061455d826146b8565b9150614568836146b8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561459d5761459c61474e565b5b828201905092915050565b60006145b3826146b8565b91506145be836146b8565b9250826145ce576145cd61477d565b5b828204905092915050565b60006145e4826146b8565b91506145ef836146b8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156146285761462761474e565b5b828202905092915050565b600061463e826146b8565b9150614649836146b8565b92508282101561465c5761465b61474e565b5b828203905092915050565b600061467282614698565b9050919050565b60008115159050919050565b600081905061469382614aca565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006146cd82614685565b9050919050565b6146dd82614881565b810181811067ffffffffffffffff821117156146fc576146fb614839565b5b80604052505050565b6000614710826146b8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156147435761474261474e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f496e73756666696369656e7420627579657220555344432042616c616e636500600082015250565b7f496e76616c6964204f7264657220494400000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e20756e617661696c61626c6520696e204445580000000000000000600082015250565b7f546f6b656e20616c7265616479207665726966696564206f6e20444558210000600082015250565b7f556e61626c6520746f2070757263686173652055534443000000000000000000600082015250565b7f4e6f74204f72646572204f776e65720000000000000000000000000000000000600082015250565b7f496e73756666696369656e742073656c6c657220546f6b656e2042616c616e6360008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e73756666696369656e742055534443000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f556e61626c6520746f2073656c6c205553444300000000000000000000000000600082015250565b7f496e73756666696369656e7420746f6b656e7300000000000000000000000000600082015250565b60028110614adb57614ada6147ac565b5b50565b614ae781614667565b8114614af257600080fd5b50565b614afe81614679565b8114614b0957600080fd5b50565b60028110614b1957600080fd5b50565b614b25816146b8565b8114614b3057600080fd5b5056fea2646970667358221220cb047bb959c643f2004029b291856bf652533b689d39ffc52ef9ff364eac05b764736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Cancel(uint256,address,address,uint256,uint256)": {
        "notice": "Event when an order is cancelled"
      },
      "Order(uint256,address,address,uint256,uint256,uint8)": {
        "notice": "Event when an order is placed on an exchange"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1199,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "usdc",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1205,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "ethToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1210,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1213,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "tokenList",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1221,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "s_orderBook",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(_Order)1259_storage)dyn_storage))"
      },
      {
        "astId": 1227,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "s_tokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1233,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "lockedFunds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1239,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "s_filledOrders",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_struct(_Order)1259_storage)dyn_storage)"
      },
      {
        "astId": 1242,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "s_orderId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1245,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "s_isManual",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(_Order)1259_storage)dyn_storage": {
        "base": "t_struct(_Order)1259_storage",
        "encoding": "dynamic_array",
        "label": "struct Exchange._Order[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Side)1262": {
        "encoding": "inplace",
        "label": "enum Exchange.Side",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(_Order)1259_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Exchange._Order[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(_Order)1259_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(_Order)1259_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Exchange._Order[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(_Order)1259_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_struct(_Order)1259_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Exchange._Order[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(_Order)1259_storage)dyn_storage"
      },
      "t_struct(_Order)1259_storage": {
        "encoding": "inplace",
        "label": "struct Exchange._Order",
        "members": [
          {
            "astId": 1247,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1249,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "user",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1251,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "token",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1253,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1255,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1258,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "side",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(Side)1262"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}