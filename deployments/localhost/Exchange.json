{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Fill",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Exchange.Side",
          "name": "side",
          "type": "uint8"
        }
      ],
      "name": "Order",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Exchange.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_testUSDC",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "createLimitBuyOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "enum Exchange.Side",
              "name": "side",
              "type": "uint8"
            }
          ],
          "internalType": "struct Exchange._Order",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "createLimitSellOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "enum Exchange.Side",
              "name": "side",
              "type": "uint8"
            }
          ],
          "internalType": "struct Exchange._Order",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "fillBuyOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "fillSellOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "enum Exchange.Side",
              "name": "side",
              "type": "uint8"
            }
          ],
          "internalType": "struct Exchange._Order[]",
          "name": "_order",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getOrderFromArray",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "enum Exchange.Side",
              "name": "side",
              "type": "uint8"
            }
          ],
          "internalType": "struct Exchange._Order",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orderBook",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "enum Exchange.Side",
          "name": "side",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "enum Exchange.Side",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "orderExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x424022f3da6bec8a6e3fa6dc54d12143e38b4df4d6ca350055e96ea3c2ec90ad",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3872969",
    "logsBloom": "0x
    "blockHash": "0xb4f48dbce5bebbf76db89a8429ee7e723411e551640499e5a6723bf86a0ffcde",
    "transactionHash": "0x424022f3da6bec8a6e3fa6dc54d12143e38b4df4d6ca350055e96ea3c2ec90ad",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x424022f3da6bec8a6e3fa6dc54d12143e38b4df4d6ca350055e96ea3c2ec90ad",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb4f48dbce5bebbf76db89a8429ee7e723411e551640499e5a6723bf86a0ffcde"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "3872969",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8621a4b2c2e993118856032dd92cd172",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Fill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_testUSDC\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createLimitBuyOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"internalType\":\"struct Exchange._Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createLimitSellOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"internalType\":\"struct Exchange._Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"fillBuyOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"fillSellOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"internalType\":\"struct Exchange._Order[]\",\"name\":\"_order\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOrderFromArray\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"internalType\":\"struct Exchange._Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderBook\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"enum Exchange.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"orderExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Cancel(uint256,address,address,uint256,uint256)\":{\"notice\":\"Event when an order is cancelled\"},\"Order(uint256,address,address,uint256,uint256,uint8)\":{\"notice\":\"Event when an order is placed on an exchange\"},\"Withdraw(address,address,uint256,uint256)\":{\"notice\":\"Event when amount withdrawn exchange\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(\\r\\n            fromBalance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n            // decrementing then incrementing.\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        unchecked {\\r\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(\\r\\n                currentAllowance >= amount,\\r\\n                \\\"ERC20: insufficient allowance\\\"\\r\\n            );\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x2ce1eba6311b6b8d11599153d655be08c43ce6a99eed22581d3673f88c95f9e1\",\"license\":\"MIT\"},\"contracts/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./testUSDC.sol\\\";\\r\\n\\r\\n/// @notice Library SafeMath used to prevent overflows and underflows\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Exchange is Ownable {\\r\\n    using SafeMath for uint256; //for prevention of integer overflow\\r\\n\\r\\n    address public Owner;\\r\\n    uint256 decimals = 10**18;\\r\\n    IERC20 token;\\r\\n    //Deposit in contract\\r\\n    mapping(address => mapping(address => uint256)) public tokens; //tokenAdress -> msg.sender -> tokenAmt\\r\\n\\r\\n    //Token Address List available in DEX\\r\\n    address[] public tokenList;\\r\\n    address ethToken = address(0);\\r\\n    address usdc;\\r\\n\\r\\n    //orderBook mappping: tokenAddress -> Side -> Order Array\\r\\n    mapping(address => mapping(uint256 => _Order[])) public orderBook;\\r\\n\\r\\n    _filledOrder[] filledOrders; //array of filled orders\\r\\n\\r\\n    uint256 public orderId = 0;\\r\\n\\r\\n    // AggregatorV3Interface private ethUsdPriceFeed;\\r\\n    // AggregatorV3Interface private btcUsdPriceFeed;\\r\\n\\r\\n    //For prevention of reentrancy\\r\\n    bool internal locked;\\r\\n\\r\\n    //Custom Errors\\r\\n\\r\\n    //Structs representing an order has unique id, user and amounts to give and get between two tokens to exchange\\r\\n    struct _Order {\\r\\n        uint256 id;\\r\\n        address user;\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n        uint256 price; //in usdc\\r\\n        Side side;\\r\\n    }\\r\\n\\r\\n    struct _filledOrder {\\r\\n        Side side;\\r\\n        _Order order;\\r\\n    }\\r\\n\\r\\n    enum Side {\\r\\n        BUY,\\r\\n        SELL\\r\\n    }\\r\\n\\r\\n    //add events\\r\\n    event Deposit(address token, address user, uint256 amount, uint256 balance);\\r\\n\\r\\n    /// @notice Event when amount withdrawn exchange\\r\\n    event Withdraw(\\r\\n        address token,\\r\\n        address user,\\r\\n        uint256 amount,\\r\\n        uint256 balance\\r\\n    );\\r\\n\\r\\n    /// @notice Event when an order is placed on an exchange\\r\\n    event Order(\\r\\n        uint256 id,\\r\\n        address user,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 price,\\r\\n        Side side\\r\\n    );\\r\\n\\r\\n    /// @notice Event when an order is cancelled\\r\\n    event Cancel(\\r\\n        uint256 id,\\r\\n        address user,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    event Fill(\\r\\n        uint256 id,\\r\\n        address user,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        Owner = msg.sender;\\r\\n        // ethUsdPriceFeed = AggregatorV3Interface(_ethUsdPriceFeed);\\r\\n        // btcUsdPriceFeed = AggregatorV3Interface(_btcUsdPriceFeed);\\r\\n    }\\r\\n\\r\\n    function depositETH() public payable {\\r\\n        tokens[ethToken][msg.sender] = tokens[ethToken][msg.sender].add(\\r\\n            msg.value\\r\\n        );\\r\\n        emit Deposit(\\r\\n            ethToken,\\r\\n            msg.sender,\\r\\n            msg.value,\\r\\n            tokens[ethToken][msg.sender]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawETH(uint256 _amount) public {\\r\\n        //_amount = _amount * decimals;\\r\\n        require(\\r\\n            tokens[ethToken][msg.sender] >= _amount,\\r\\n            \\\"Insufficient balance ETH to withdraw\\\"\\r\\n        );\\r\\n        require(!locked, \\\"Reentrant call detected!\\\");\\r\\n        locked = true;\\r\\n        tokens[ethToken][msg.sender] = tokens[ethToken][msg.sender].sub(\\r\\n            _amount\\r\\n        );\\r\\n        locked = false;\\r\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\r\\n        require(success, \\\"failed to send amount\\\");\\r\\n\\r\\n        emit Withdraw(\\r\\n            ethToken,\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            tokens[ethToken][msg.sender]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //from and transferFrom is from ERC20 contract\\r\\n    //_token should be an ERC20 token\\r\\n    function depositToken(address _token, uint256 _amount) public {\\r\\n        require(_token != ethToken);\\r\\n        //need to add a check to prove that it is an ERC20 token\\r\\n        token = IERC20(_token);\\r\\n        require(\\r\\n            token.transferFrom(msg.sender, address(this), _amount),\\r\\n            \\\"Error here\\\"\\r\\n        );\\r\\n        tokens[_token][msg.sender] = tokens[_token][msg.sender].add(_amount);\\r\\n        emit Deposit(_token, msg.sender, _amount, tokens[_token][msg.sender]);\\r\\n    }\\r\\n\\r\\n    function withdrawToken(address _token, uint256 _amount) public {\\r\\n        require(_token != ethToken);\\r\\n        require(tokens[_token][msg.sender] >= _amount);\\r\\n        require(!locked, \\\"Reentrant call detected!\\\");\\r\\n        locked = true;\\r\\n        tokens[_token][msg.sender] = tokens[_token][msg.sender].sub(_amount);\\r\\n        token = IERC20(_token);\\r\\n        require(token.transfer(msg.sender, _amount));\\r\\n        locked = false;\\r\\n        emit Withdraw(_token, msg.sender, _amount, tokens[_token][msg.sender]);\\r\\n    }\\r\\n\\r\\n    //balance of specific tokens in the dex owned by specific user\\r\\n    function balanceOf(address _token, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return tokens[_token][_user];\\r\\n    }\\r\\n\\r\\n    //For Buyer, when making buy order they deposit usdc and receive token of choice\\r\\n    //For seller, when making sell order, they deposit token of choice and receive usdc\\r\\n    function createLimitBuyOrder(\\r\\n        address _token,\\r\\n        address _testUSDC,\\r\\n        uint256 _amount,\\r\\n        uint256 _price //in usdc/token\\r\\n    ) public returns (_Order memory) {\\r\\n        //Amount user has deposited in the DEX must be >= value he wants to buy\\r\\n        usdc = _testUSDC;\\r\\n        require(\\r\\n            tokens[usdc][msg.sender] >= _amount.mul(_price),\\r\\n            \\\"Insufficient USDC in exchange\\\"\\r\\n        );\\r\\n\\r\\n        _Order[] storage _order = orderBook[_token][uint256(Side.BUY)];\\r\\n        _order.push(\\r\\n            _Order(orderId, msg.sender, _token, _amount, _price, Side.BUY)\\r\\n        );\\r\\n\\r\\n        emit Order(orderId, msg.sender, _token, _amount, _price, Side.BUY);\\r\\n\\r\\n        orderId++;\\r\\n\\r\\n        return _order[_order.length - 1];\\r\\n    }\\r\\n\\r\\n    function createLimitSellOrder(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint256 _price //in usdc/token\\r\\n    ) public returns (_Order memory) {\\r\\n        _amount = _amount * decimals;\\r\\n        //Amount of tokens user deposit in DEX must be >= the amount of tokens they want to sell\\r\\n        require(\\r\\n            tokens[_token][msg.sender] >= _amount,\\r\\n            \\\"Insufficient tokens in exchange\\\"\\r\\n        );\\r\\n\\r\\n        _Order[] storage _order = orderBook[_token][uint256(Side.SELL)];\\r\\n        _order.push(\\r\\n            _Order(orderId, msg.sender, _token, _amount, _price, Side.SELL)\\r\\n        );\\r\\n\\r\\n        emit Order(orderId, msg.sender, _token, _amount, _price, Side.SELL);\\r\\n\\r\\n        orderId++;\\r\\n\\r\\n        return _order[_order.length - 1];\\r\\n    }\\r\\n\\r\\n    function cancelOrder(\\r\\n        Side side,\\r\\n        uint256 _id,\\r\\n        address _token\\r\\n    ) public {\\r\\n        require(_id >= 0 && _id <= orderId, \\\"Invalid Order ID to cancel\\\");\\r\\n        _Order[] storage _order = orderBook[_token][uint256(side)];\\r\\n        _Order memory order;\\r\\n\\r\\n        uint256 index;\\r\\n        for (uint256 i = 0; i < _order.length; i++) {\\r\\n            if (_order[i].id == _id) {\\r\\n                index = i;\\r\\n                order = _order[i];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint256 j = index; j < _order.length - 1; j++) {\\r\\n            _order[j] = _order[j + 1];\\r\\n        }\\r\\n        delete _order[_order.length - 1];\\r\\n        _order.pop();\\r\\n\\r\\n        uint256 amount = order.amount * decimals;\\r\\n        uint256 price = order.price;\\r\\n        require(address(order.user) == msg.sender);\\r\\n\\r\\n        orderBook[_token][uint256(side)] = _order;\\r\\n\\r\\n        emit Cancel(_id, msg.sender, _token, amount, price);\\r\\n    }\\r\\n\\r\\n    function fillBuyOrder(\\r\\n        uint256 _id,\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint256 _price\\r\\n    ) public {\\r\\n        require(_id >= 0 && _id <= orderId);\\r\\n        _amount = _amount * decimals;\\r\\n        _Order[] memory _order = orderBook[_token][0];\\r\\n        _Order memory order;\\r\\n\\r\\n        order = getOrderFromArray(_order, _id);\\r\\n\\r\\n        require(order.user == msg.sender);\\r\\n        require(order.amount >= _amount);\\r\\n        order.amount = order.amount.sub(_amount);\\r\\n\\r\\n        emit Fill(_id, msg.sender, _token, _amount, _price);\\r\\n\\r\\n        if (order.amount == 0) {\\r\\n            filledOrders.push(_filledOrder(Side.BUY, order));\\r\\n            cancelOrder(Side.BUY, order.id, order.token); //remove filled orders\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function fillSellOrder(\\r\\n        uint256 _id,\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint256 _price\\r\\n    ) public {\\r\\n        require(_id >= 0 && _id <= orderId);\\r\\n        _amount = _amount * decimals;\\r\\n        _Order[] memory _order = orderBook[_token][1];\\r\\n        _Order memory order;\\r\\n\\r\\n        order = getOrderFromArray(_order, _id);\\r\\n\\r\\n        require(order.user == msg.sender);\\r\\n        require(order.amount >= _amount);\\r\\n        order.amount = order.amount.sub(_amount);\\r\\n\\r\\n        emit Fill(_id, msg.sender, _token, _amount, _price);\\r\\n\\r\\n        if (order.amount == 0) {\\r\\n            filledOrders.push(_filledOrder(Side.SELL, order));\\r\\n            cancelOrder(Side.SELL, order.id, order.token); //remove filled orders\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // function removeFilledOrders() public {\\r\\n    //     for (uint256 i = 0; i < filledOrders.length; i++) {\\r\\n    //         address token = (filledOrders[i].order).token;\\r\\n    //         uint256 id = (filledOrders[i].order).id;\\r\\n\\r\\n    //         if (filledOrders[i].side == Side.BUY) {\\r\\n    //             delete (buyOrders[token][id]);\\r\\n    //         } else if (filledOrders[i].side == Side.SELL) {\\r\\n    //             delete (sellOrders[token][id]);\\r\\n    //         }\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    function matchOrders(\\r\\n        address _token,\\r\\n        uint256 _id,\\r\\n        Side side\\r\\n    ) internal {\\r\\n        //when order is filled,\\r\\n        //BUY Side => deduct USDC from balance, sent token to balance, order updated.\\r\\n        //SELL Side =>deduct token from balance, sent USDC from DEX, order updated.\\r\\n        uint256 saleTokenAmt;\\r\\n\\r\\n        if (side == Side.BUY) {\\r\\n            //Retrieve buy order to be filled\\r\\n            _Order[] memory _order = orderBook[_token][0];\\r\\n            _Order memory buyOrderToFill = getOrderFromArray(_order, _id);\\r\\n            uint256 limitPrice = buyOrderToFill.price;\\r\\n            uint256 amountTokens = buyOrderToFill.amount;\\r\\n            address owner = buyOrderToFill.user;\\r\\n\\r\\n            //Retrieve sell order to match\\r\\n            _Order[] storage _sellOrder = orderBook[_token][1];\\r\\n            for (uint256 i = 0; i < _sellOrder.length; i++) {\\r\\n                //sell order hit buyer's limit price\\r\\n                if (_sellOrder[i].price <= limitPrice) {\\r\\n                    uint256 sellId = _sellOrder[i].id;\\r\\n                    uint256 sellPrice = _sellOrder[i].price;\\r\\n                    uint256 sellTokenAmt = _sellOrder[i].amount;\\r\\n                    address seller = _sellOrder[i].user;\\r\\n\\r\\n                    //if buyer's amount to buy > seller's amount to sell\\r\\n                    if (amountTokens > sellTokenAmt) {\\r\\n                        saleTokenAmt = sellTokenAmt;\\r\\n                    }\\r\\n                    //if seller's amount to sell >= buyer's amount to buy\\r\\n                    else if (amountTokens <= sellTokenAmt) {\\r\\n                        saleTokenAmt = amountTokens;\\r\\n                    }\\r\\n\\r\\n                    //Verify current balance\\r\\n                    require(\\r\\n                        tokens[usdc][owner] >= amountTokens.mul(sellPrice),\\r\\n                        \\\"Buyer currently does not have enough USDC Balance\\\"\\r\\n                    );\\r\\n                    require(\\r\\n                        tokens[_token][seller] >= amountTokens,\\r\\n                        \\\"Seller currently does not have enough Token Balance\\\"\\r\\n                    );\\r\\n\\r\\n                    //update orders\\r\\n                    fillBuyOrder(_id, _token, saleTokenAmt, sellPrice);\\r\\n                    fillSellOrder(sellId, _token, saleTokenAmt, sellPrice);\\r\\n\\r\\n                    //buyer update\\r\\n                    //require(owner==msg.sender);\\r\\n                    tokens[_token][owner] = tokens[_token][owner].add(\\r\\n                        saleTokenAmt\\r\\n                    );\\r\\n                    tokens[usdc][owner] = tokens[usdc][owner].sub(\\r\\n                        sellPrice.mul(saleTokenAmt)\\r\\n                    );\\r\\n\\r\\n                    //seller update\\r\\n                    tokens[_token][seller] = tokens[_token][seller].sub(\\r\\n                        saleTokenAmt\\r\\n                    );\\r\\n                    tokens[usdc][seller] = tokens[usdc][seller].add(\\r\\n                        sellPrice.mul(saleTokenAmt)\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                if (buyOrderToFill.amount == 0) break;\\r\\n            }\\r\\n        } else if (side == Side.SELL) {\\r\\n            //Retrieve buy order to be filled\\r\\n            _Order[] memory _order = orderBook[_token][1];\\r\\n            _Order memory sellOrderToFill = getOrderFromArray(_order, _id);\\r\\n            uint256 limitPrice = sellOrderToFill.price;\\r\\n            uint256 amountTokens = sellOrderToFill.amount;\\r\\n            address owner = sellOrderToFill.user;\\r\\n\\r\\n            //Retrieve sell order to match\\r\\n            _Order[] storage _buyOrder = orderBook[_token][0];\\r\\n            for (uint256 i = 0; i < _buyOrder.length; i++) {\\r\\n                //sell order hit buyer's limit price\\r\\n                if (_buyOrder[i].price >= limitPrice) {\\r\\n                    uint256 buyId = _buyOrder[i].id;\\r\\n                    uint256 buyPrice = _buyOrder[i].price;\\r\\n                    uint256 buyTokenAmt = _buyOrder[i].amount;\\r\\n                    address buyer = _buyOrder[i].user;\\r\\n\\r\\n                    //if seller's amount to sell > buyer's amount to buy\\r\\n                    if (amountTokens > buyTokenAmt) {\\r\\n                        saleTokenAmt = buyTokenAmt;\\r\\n                    }\\r\\n                    //if buyer's amount to buy > seller's amount to sell\\r\\n                    else if (amountTokens <= buyTokenAmt) {\\r\\n                        saleTokenAmt = amountTokens;\\r\\n                    }\\r\\n\\r\\n                    //Verify current balance\\r\\n                    require(\\r\\n                        tokens[_token][owner] >= amountTokens,\\r\\n                        \\\"Seller currently does not have enough Token Balance\\\"\\r\\n                    );\\r\\n                    require(\\r\\n                        tokens[usdc][buyer] >= amountTokens.mul(buyPrice),\\r\\n                        \\\"Buyer currently does not have enough USDC Balance\\\"\\r\\n                    );\\r\\n\\r\\n                    //update orders\\r\\n                    fillSellOrder(_id, _token, saleTokenAmt, buyPrice);\\r\\n                    fillBuyOrder(buyId, _token, saleTokenAmt, buyPrice);\\r\\n\\r\\n                    //seller update\\r\\n                    require(owner == msg.sender);\\r\\n                    tokens[_token][owner] = tokens[_token][owner].sub(\\r\\n                        saleTokenAmt\\r\\n                    );\\r\\n                    tokens[usdc][owner] = tokens[usdc][owner].add(\\r\\n                        buyPrice.mul(saleTokenAmt)\\r\\n                    );\\r\\n\\r\\n                    //buyer update\\r\\n                    tokens[_token][buyer] = tokens[_token][buyer].add(\\r\\n                        saleTokenAmt\\r\\n                    );\\r\\n                    tokens[usdc][buyer] = tokens[usdc][buyer].sub(\\r\\n                        buyPrice.mul(saleTokenAmt)\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                if (sellOrderToFill.amount == 0) break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getOrderFromArray(_Order[] memory _order, uint256 _id)\\r\\n        public\\r\\n        pure\\r\\n        returns (_Order memory)\\r\\n    {\\r\\n        _Order memory order;\\r\\n        for (uint256 i = 0; i < _order.length; i++) {\\r\\n            if (_order[i].id == _id) {\\r\\n                order = _order[i];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return order;\\r\\n    }\\r\\n\\r\\n    function orderExists(\\r\\n        uint256 _id,\\r\\n        Side side,\\r\\n        address _token\\r\\n    ) public view returns (bool) {\\r\\n        _Order[] memory orders = orderBook[_token][uint256(side)];\\r\\n\\r\\n        for (uint256 i = 0; i < orders.length; i++) {\\r\\n            if (orders[i].id == _id) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x21f5b657c1f5aae0fa8b9e2e37a7d93646463d96c3ec20ceea8b105f508c4c7f\",\"license\":\"MIT\"},\"contracts/testUSDC.sol\":{\"content\":\"/* ERC 20 constructor takes in 2 strings, feel free to change the first string to the name of your token name, and the second string to the corresponding symbol for your custom token name */\\r\\n// SPDX-License-Identifier: MIT\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract testUSDC is ERC20 {\\r\\n    constructor(uint256 _initial_supply) ERC20(\\\"testUSDC\\\", \\\"tUSDC\\\") {\\r\\n        _mint(msg.sender, _initial_supply);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9155e702cd4b3503ebb8d940ec34f3b04aad990f7d9417e9616f179e1a6a32bd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052670de0b6b3a76400006002556000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a553480156200006457600080fd5b506200008562000079620000cc60201b60201c565b620000d460201b60201c565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000198565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6143d380620001a86000396000f3fe60806040526004361061011f5760003560e01c80638e9fbea4116100a0578063f14210a611610064578063f14210a6146103f7578063f253c71114610420578063f2fde38b14610462578063f6326fb31461048b578063f7888aec146104955761011f565b80638e9fbea4146103005780639e281a98146103295780639ead722214610352578063a694ccf11461038f578063b4a99a4e146103cc5761011f565b8063508493bc116100e7578063508493bc1461021b57806360bb83d81461025857806367ee84c114610295578063715018a6146102be5780638da5cb5b146102d55761011f565b80631347d60e14610124578063163de5e51461014d578063182cffeb146101785780632061da58146101b5578063338b5dea146101f2575b600080fd5b34801561013057600080fd5b5061014b600480360381019061014691906137b1565b6104d2565b005b34801561015957600080fd5b50610162610b35565b60405161016f9190613d58565b60405180910390f35b34801561018457600080fd5b5061019f600480360381019061019a9190613898565b610b3b565b6040516101ac9190613c02565b60405180910390f35b3480156101c157600080fd5b506101dc60048036038101906101d791906136d5565b610d5b565b6040516101e99190613d3d565b60405180910390f35b3480156101fe57600080fd5b5061021960048036038101906102149190613695565b6111b4565b005b34801561022757600080fd5b50610242600480360381019061023d91906135ee565b61150c565b60405161024f9190613d58565b60405180910390f35b34801561026457600080fd5b5061027f600480360381019061027a919061362e565b611531565b60405161028c9190613d3d565b60405180910390f35b3480156102a157600080fd5b506102bc60048036038101906102b79190613831565b6119f1565b005b3480156102ca57600080fd5b506102d3611e22565b005b3480156102e157600080fd5b506102ea611e36565b6040516102f79190613b42565b60405180910390f35b34801561030c57600080fd5b5061032760048036038101906103229190613831565b611e5f565b005b34801561033557600080fd5b50610350600480360381019061034b9190613695565b612290565b005b34801561035e57600080fd5b5061037960048036038101906103749190613804565b6126bf565b6040516103869190613b42565b60405180910390f35b34801561039b57600080fd5b506103b660048036038101906103b19190613728565b6126fe565b6040516103c39190613d3d565b60405180910390f35b3480156103d857600080fd5b506103e1612780565b6040516103ee9190613b42565b60405180910390f35b34801561040357600080fd5b5061041e60048036038101906104199190613804565b6127a6565b005b34801561042c57600080fd5b50610447600480360381019061044291906136d5565b612c0d565b60405161045996959493929190613dc6565b60405180910390f35b34801561046e57600080fd5b50610489600480360381019061048491906135c1565b612cc0565b005b610493612d44565b005b3480156104a157600080fd5b506104bc60048036038101906104b791906135ee565b612f96565b6040516104c99190613d58565b60405180910390f35b600082101580156104e55750600a548211155b610524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051b90613d1d565b60405180910390fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085600181111561057a5761057961408e565b5b815260200190815260200160002090506105926131a9565b600080600090505b838054905081101561072057858482815481106105ba576105b96140ec565b5b906000526020600020906006020160000154141561070d578091508381815481106105e8576105e76140ec565b5b90600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660018111156106f0576106ef61408e565b5b60018111156107025761070161408e565b5b815250509250610720565b808061071890614016565b91505061059a565b5060008190505b600184805490506107389190613f44565b8110156108cc578360018261074d9190613e94565b8154811061075e5761075d6140ec565b5b906000526020600020906006020184828154811061077f5761077e6140ec565b5b9060005260206000209060060201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201548160030155600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff021916908360018111156108b1576108b061408e565b5b021790555090505080806108c490614016565b915050610727565b5082600184805490506108df9190613f44565b815481106108f0576108ef6140ec565b5b90600052602060002090600602016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000905560048201600090556005820160006101000a81549060ff021916905550508280548061098c5761098b6140bd565b5b60019003818190600052602060002090600602016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000905560048201600090556005820160006101000a81549060ff02191690555050905560006002548360600151610a339190613eea565b90506000836080015190503373ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff1614610a7a57600080fd5b84600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a6001811115610acf57610ace61408e565b5b8152602001908152602001600020908054610aeb92919061321d565b507fca5fbf354151ee18d2ff58712c9ed7be34397aa5983abfaf40e2d8485867d9668733888585604051610b23959493929190613d73565b60405180910390a15050505050505050565b600a5481565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000856001811115610b9257610b9161408e565b5b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610cf757838290600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166001811115610cd257610cd161408e565b5b6001811115610ce457610ce361408e565b5b8152505081526020019060010190610bc0565b50505050905060005b8151811015610d4d5785828281518110610d1d57610d1c6140ec565b5b6020026020010151600001511415610d3a57600192505050610d54565b8080610d4590614016565b915050610d00565b5060009150505b9392505050565b610d636131a9565b60025483610d719190613eea565b925082600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610e32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2990613c1d565b60405180910390fd5b6000600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600180811115610e8857610e8761408e565b5b81526020019081526020016000209050806040518060c00160405280600a5481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001600180811115610f0357610f0261408e565b5b81525090806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908360018111156110065761100561408e565b5b021790555050507f95f7e844715189eed0317d8f771c63ce13ec6364f48022f3db86baf8ce584b95600a5433878787600160405161104996959493929190613dc6565b60405180910390a1600a600081548092919061106490614016565b9190505550806001828054905061107b9190613f44565b8154811061108c5761108b6140ec565b5b90600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660018111156111945761119361408e565b5b60018111156111a6576111a561408e565b5b815250509150509392505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561120f57600080fd5b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016112af93929190613b5d565b602060405180830381600087803b1580156112c957600080fd5b505af11580156112dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113019190613784565b611340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133790613c7d565b60405180910390fd5b6113cf81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461301d90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7823383600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516115009493929190613b94565b60405180910390a15050565b6004602052816000526040600020602052806000526040600020600091509150505481565b6115396131a9565b83600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061158d828461303390919063ffffffff16565b60046000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561166d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166490613cdd565b60405180910390fd5b6000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060018111156116c3576116c261408e565b5b81526020019081526020016000209050806040518060c00160405280600a5481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020016000600181111561173f5761173e61408e565b5b81525090806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908360018111156118425761184161408e565b5b021790555050507f95f7e844715189eed0317d8f771c63ce13ec6364f48022f3db86baf8ce584b95600a5433888787600060405161188596959493929190613dc6565b60405180910390a1600a60008154809291906118a090614016565b919050555080600182805490506118b79190613f44565b815481106118c8576118c76140ec565b5b90600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660018111156119d0576119cf61408e565b5b60018111156119e2576119e161408e565b5b81525050915050949350505050565b60008410158015611a045750600a548411155b611a0d57600080fd5b60025482611a1b9190613eea565b91506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611bc657838290600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166001811115611ba157611ba061408e565b5b6001811115611bb357611bb261408e565b5b8152505081526020019060010190611a8f565b505050509050611bd46131a9565b611bde82876126fe565b90503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614611c1c57600080fd5b8381606001511015611c2d57600080fd5b611c4484826060015161304990919063ffffffff16565b8160600181815250507f6b2a78965102b6dcf63436e21fb398d05a11120cdd8b64e83291405e3387cdf28633878787604051611c84959493929190613d73565b60405180910390a1600081606001511415611e1a576009604051806040016040528060006001811115611cba57611cb961408e565b5b815260200183815250908060018154018082558091505060019003906000526020600020906007020160009091909190915060008201518160000160006101000a81548160ff02191690836001811115611d1757611d1661408e565b5b02179055506020820151816001016000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836001811115611dfc57611dfb61408e565b5b021790555050505050611e196000826000015183604001516104d2565b5b505050505050565b611e2a61305f565b611e3460006130dd565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008410158015611e725750600a548411155b611e7b57600080fd5b60025482611e899190613eea565b91506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561203557838290600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660018111156120105761200f61408e565b5b60018111156120225761202161408e565b5b8152505081526020019060010190611efe565b5050505090506120436131a9565b61204d82876126fe565b90503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff161461208b57600080fd5b838160600151101561209c57600080fd5b6120b384826060015161304990919063ffffffff16565b8160600181815250507f6b2a78965102b6dcf63436e21fb398d05a11120cdd8b64e83291405e3387cdf286338787876040516120f3959493929190613d73565b60405180910390a160008160600151141561228857600960405180604001604052806001808111156121285761212761408e565b5b815260200183815250908060018154018082558091505060019003906000526020600020906007020160009091909190915060008201518160000160006101000a81548160ff021916908360018111156121855761218461408e565b5b02179055506020820151816001016000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083600181111561226a5761226961408e565b5b0217905550505050506122876001826000015183604001516104d2565b5b505050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156122eb57600080fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561237457600080fd5b600b60009054906101000a900460ff16156123c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123bb90613c3d565b60405180910390fd5b6001600b60006101000a81548160ff02191690831515021790555061246e81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461304990919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161258c929190613bd9565b602060405180830381600087803b1580156125a657600080fd5b505af11580156125ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125de9190613784565b6125e757600080fd5b6000600b60006101000a81548160ff0219169083151502179055507ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567823383600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516126b39493929190613b94565b60405180910390a15050565b600581815481106126cf57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6127066131a9565b61270e6131a9565b60005b8451811015612775578385828151811061272e5761272d6140ec565b5b602002602001015160000151141561276257848181518110612753576127526140ec565b5b60200260200101519150612775565b808061276d90614016565b915050612711565b508091505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8060046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287e90613cbd565b60405180910390fd5b600b60009054906101000a900460ff16156128d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128ce90613c3d565b60405180910390fd5b6001600b60006101000a81548160ff0219169083151502179055506129a38160046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461304990919063ffffffff16565b60046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600b60006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff1682604051612a8690613b2d565b60006040518083038185875af1925050503d8060008114612ac3576040519150601f19603f3d011682016040523d82523d6000602084013e612ac8565b606091505b5050905080612b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0390613c9d565b60405180910390fd5b7ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338460046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051612c019493929190613b94565b60405180910390a15050565b60086020528260005260406000206020528160005260406000208181548110612c3557600080fd5b906000526020600020906006020160009250925050508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050160009054906101000a900460ff16905086565b612cc861305f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d2f90613c5d565b60405180910390fd5b612d41816130dd565b50565b612df53460046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461301d90919063ffffffff16565b60046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333460046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051612f8c9493929190613b94565b60405180910390a1565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000818361302b9190613e94565b905092915050565b600081836130419190613eea565b905092915050565b600081836130579190613f44565b905092915050565b6130676131a1565b73ffffffffffffffffffffffffffffffffffffffff16613085611e36565b73ffffffffffffffffffffffffffffffffffffffff16146130db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130d290613cfd565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600060018111156132175761321661408e565b5b81525090565b82805482825590600052602060002090600602810192821561338d5760005260206000209160060282015b8281111561338c578282600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201548160030155600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff021916908360018111156133765761337561408e565b5b0217905550505091600601919060060190613248565b5b50905061339a919061339e565b5090565b5b8082111561342b576000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000905560048201600090556005820160006101000a81549060ff02191690555060060161339f565b5090565b600061344261343d84613e4c565b613e27565b905080838252602082019050828560c086028201111561346557613464614154565b5b60005b85811015613495578161347b888261350c565b845260208401935060c08301925050600181019050613468565b5050509392505050565b6000813590506134ae81614348565b92915050565b600082601f8301126134c9576134c861414a565b5b81356134d984826020860161342f565b91505092915050565b6000815190506134f18161435f565b92915050565b60008135905061350681614376565b92915050565b600060c082840312156135225761352161414f565b5b61352c60c0613e27565b9050600061353c848285016135ac565b60008301525060206135508482850161349f565b60208301525060406135648482850161349f565b6040830152506060613578848285016135ac565b606083015250608061358c848285016135ac565b60808301525060a06135a0848285016134f7565b60a08301525092915050565b6000813590506135bb81614386565b92915050565b6000602082840312156135d7576135d661415e565b5b60006135e58482850161349f565b91505092915050565b600080604083850312156136055761360461415e565b5b60006136138582860161349f565b92505060206136248582860161349f565b9150509250929050565b600080600080608085870312156136485761364761415e565b5b60006136568782880161349f565b94505060206136678782880161349f565b9350506040613678878288016135ac565b9250506060613689878288016135ac565b91505092959194509250565b600080604083850312156136ac576136ab61415e565b5b60006136ba8582860161349f565b92505060206136cb858286016135ac565b9150509250929050565b6000806000606084860312156136ee576136ed61415e565b5b60006136fc8682870161349f565b935050602061370d868287016135ac565b925050604061371e868287016135ac565b9150509250925092565b6000806040838503121561373f5761373e61415e565b5b600083013567ffffffffffffffff81111561375d5761375c614159565b5b613769858286016134b4565b925050602061377a858286016135ac565b9150509250929050565b60006020828403121561379a5761379961415e565b5b60006137a8848285016134e2565b91505092915050565b6000806000606084860312156137ca576137c961415e565b5b60006137d8868287016134f7565b93505060206137e9868287016135ac565b92505060406137fa8682870161349f565b9150509250925092565b60006020828403121561381a5761381961415e565b5b6000613828848285016135ac565b91505092915050565b6000806000806080858703121561384b5761384a61415e565b5b6000613859878288016135ac565b945050602061386a8782880161349f565b935050604061387b878288016135ac565b925050606061388c878288016135ac565b91505092959194509250565b6000806000606084860312156138b1576138b061415e565b5b60006138bf868287016135ac565b93505060206138d0868287016134f7565b92505060406138e18682870161349f565b9150509250925092565b6138f481613f78565b82525050565b61390381613f78565b82525050565b61391281613f8a565b82525050565b61392181613fd3565b82525050565b61393081613fd3565b82525050565b6000613943601f83613e83565b915061394e82614174565b602082019050919050565b6000613966601883613e83565b91506139718261419d565b602082019050919050565b6000613989602683613e83565b9150613994826141c6565b604082019050919050565b60006139ac600a83613e83565b91506139b782614215565b602082019050919050565b60006139cf601583613e83565b91506139da8261423e565b602082019050919050565b60006139f2602483613e83565b91506139fd82614267565b604082019050919050565b6000613a15601d83613e83565b9150613a20826142b6565b602082019050919050565b6000613a38602083613e83565b9150613a43826142df565b602082019050919050565b6000613a5b601a83613e83565b9150613a6682614308565b602082019050919050565b6000613a7e600083613e78565b9150613a8982614331565b600082019050919050565b60c082016000820151613aaa6000850182613b0f565b506020820151613abd60208501826138eb565b506040820151613ad060408501826138eb565b506060820151613ae36060850182613b0f565b506080820151613af66080850182613b0f565b5060a0820151613b0960a0850182613918565b50505050565b613b1881613fc9565b82525050565b613b2781613fc9565b82525050565b6000613b3882613a71565b9150819050919050565b6000602082019050613b5760008301846138fa565b92915050565b6000606082019050613b7260008301866138fa565b613b7f60208301856138fa565b613b8c6040830184613b1e565b949350505050565b6000608082019050613ba960008301876138fa565b613bb660208301866138fa565b613bc36040830185613b1e565b613bd06060830184613b1e565b95945050505050565b6000604082019050613bee60008301856138fa565b613bfb6020830184613b1e565b9392505050565b6000602082019050613c176000830184613909565b92915050565b60006020820190508181036000830152613c3681613936565b9050919050565b60006020820190508181036000830152613c5681613959565b9050919050565b60006020820190508181036000830152613c768161397c565b9050919050565b60006020820190508181036000830152613c968161399f565b9050919050565b60006020820190508181036000830152613cb6816139c2565b9050919050565b60006020820190508181036000830152613cd6816139e5565b9050919050565b60006020820190508181036000830152613cf681613a08565b9050919050565b60006020820190508181036000830152613d1681613a2b565b9050919050565b60006020820190508181036000830152613d3681613a4e565b9050919050565b600060c082019050613d526000830184613a94565b92915050565b6000602082019050613d6d6000830184613b1e565b92915050565b600060a082019050613d886000830188613b1e565b613d9560208301876138fa565b613da260408301866138fa565b613daf6060830185613b1e565b613dbc6080830184613b1e565b9695505050505050565b600060c082019050613ddb6000830189613b1e565b613de860208301886138fa565b613df560408301876138fa565b613e026060830186613b1e565b613e0f6080830185613b1e565b613e1c60a0830184613927565b979650505050505050565b6000613e31613e42565b9050613e3d8282613fe5565b919050565b6000604051905090565b600067ffffffffffffffff821115613e6757613e6661411b565b5b602082029050602081019050919050565b600081905092915050565b600082825260208201905092915050565b6000613e9f82613fc9565b9150613eaa83613fc9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613edf57613ede61405f565b5b828201905092915050565b6000613ef582613fc9565b9150613f0083613fc9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f3957613f3861405f565b5b828202905092915050565b6000613f4f82613fc9565b9150613f5a83613fc9565b925082821015613f6d57613f6c61405f565b5b828203905092915050565b6000613f8382613fa9565b9050919050565b60008115159050919050565b6000819050613fa482614334565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613fde82613f96565b9050919050565b613fee82614163565b810181811067ffffffffffffffff8211171561400d5761400c61411b565b5b80604052505050565b600061402182613fc9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156140545761405361405f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f496e73756666696369656e7420746f6b656e7320696e2065786368616e676500600082015250565b7f5265656e7472616e742063616c6c206465746563746564210000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4572726f72206865726500000000000000000000000000000000000000000000600082015250565b7f6661696c656420746f2073656e6420616d6f756e740000000000000000000000600082015250565b7f496e73756666696369656e742062616c616e63652045544820746f207769746860008201527f6472617700000000000000000000000000000000000000000000000000000000602082015250565b7f496e73756666696369656e74205553444320696e2065786368616e6765000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e76616c6964204f7264657220494420746f2063616e63656c000000000000600082015250565b50565b600281106143455761434461408e565b5b50565b61435181613f78565b811461435c57600080fd5b50565b61436881613f8a565b811461437357600080fd5b50565b6002811061438357600080fd5b50565b61438f81613fc9565b811461439a57600080fd5b5056fea2646970667358221220ef80dc098e6c0593611cfc6164f1c8e1cd0724267940e961b75bf5b7963bd1b564736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c80638e9fbea4116100a0578063f14210a611610064578063f14210a6146103f7578063f253c71114610420578063f2fde38b14610462578063f6326fb31461048b578063f7888aec146104955761011f565b80638e9fbea4146103005780639e281a98146103295780639ead722214610352578063a694ccf11461038f578063b4a99a4e146103cc5761011f565b8063508493bc116100e7578063508493bc1461021b57806360bb83d81461025857806367ee84c114610295578063715018a6146102be5780638da5cb5b146102d55761011f565b80631347d60e14610124578063163de5e51461014d578063182cffeb146101785780632061da58146101b5578063338b5dea146101f2575b600080fd5b34801561013057600080fd5b5061014b600480360381019061014691906137b1565b6104d2565b005b34801561015957600080fd5b50610162610b35565b60405161016f9190613d58565b60405180910390f35b34801561018457600080fd5b5061019f600480360381019061019a9190613898565b610b3b565b6040516101ac9190613c02565b60405180910390f35b3480156101c157600080fd5b506101dc60048036038101906101d791906136d5565b610d5b565b6040516101e99190613d3d565b60405180910390f35b3480156101fe57600080fd5b5061021960048036038101906102149190613695565b6111b4565b005b34801561022757600080fd5b50610242600480360381019061023d91906135ee565b61150c565b60405161024f9190613d58565b60405180910390f35b34801561026457600080fd5b5061027f600480360381019061027a919061362e565b611531565b60405161028c9190613d3d565b60405180910390f35b3480156102a157600080fd5b506102bc60048036038101906102b79190613831565b6119f1565b005b3480156102ca57600080fd5b506102d3611e22565b005b3480156102e157600080fd5b506102ea611e36565b6040516102f79190613b42565b60405180910390f35b34801561030c57600080fd5b5061032760048036038101906103229190613831565b611e5f565b005b34801561033557600080fd5b50610350600480360381019061034b9190613695565b612290565b005b34801561035e57600080fd5b5061037960048036038101906103749190613804565b6126bf565b6040516103869190613b42565b60405180910390f35b34801561039b57600080fd5b506103b660048036038101906103b19190613728565b6126fe565b6040516103c39190613d3d565b60405180910390f35b3480156103d857600080fd5b506103e1612780565b6040516103ee9190613b42565b60405180910390f35b34801561040357600080fd5b5061041e60048036038101906104199190613804565b6127a6565b005b34801561042c57600080fd5b50610447600480360381019061044291906136d5565b612c0d565b60405161045996959493929190613dc6565b60405180910390f35b34801561046e57600080fd5b50610489600480360381019061048491906135c1565b612cc0565b005b610493612d44565b005b3480156104a157600080fd5b506104bc60048036038101906104b791906135ee565b612f96565b6040516104c99190613d58565b60405180910390f35b600082101580156104e55750600a548211155b610524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051b90613d1d565b60405180910390fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085600181111561057a5761057961408e565b5b815260200190815260200160002090506105926131a9565b600080600090505b838054905081101561072057858482815481106105ba576105b96140ec565b5b906000526020600020906006020160000154141561070d578091508381815481106105e8576105e76140ec565b5b90600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660018111156106f0576106ef61408e565b5b60018111156107025761070161408e565b5b815250509250610720565b808061071890614016565b91505061059a565b5060008190505b600184805490506107389190613f44565b8110156108cc578360018261074d9190613e94565b8154811061075e5761075d6140ec565b5b906000526020600020906006020184828154811061077f5761077e6140ec565b5b9060005260206000209060060201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201548160030155600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff021916908360018111156108b1576108b061408e565b5b021790555090505080806108c490614016565b915050610727565b5082600184805490506108df9190613f44565b815481106108f0576108ef6140ec565b5b90600052602060002090600602016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000905560048201600090556005820160006101000a81549060ff021916905550508280548061098c5761098b6140bd565b5b60019003818190600052602060002090600602016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000905560048201600090556005820160006101000a81549060ff02191690555050905560006002548360600151610a339190613eea565b90506000836080015190503373ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff1614610a7a57600080fd5b84600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a6001811115610acf57610ace61408e565b5b8152602001908152602001600020908054610aeb92919061321d565b507fca5fbf354151ee18d2ff58712c9ed7be34397aa5983abfaf40e2d8485867d9668733888585604051610b23959493929190613d73565b60405180910390a15050505050505050565b600a5481565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000856001811115610b9257610b9161408e565b5b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610cf757838290600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166001811115610cd257610cd161408e565b5b6001811115610ce457610ce361408e565b5b8152505081526020019060010190610bc0565b50505050905060005b8151811015610d4d5785828281518110610d1d57610d1c6140ec565b5b6020026020010151600001511415610d3a57600192505050610d54565b8080610d4590614016565b915050610d00565b5060009150505b9392505050565b610d636131a9565b60025483610d719190613eea565b925082600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610e32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2990613c1d565b60405180910390fd5b6000600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600180811115610e8857610e8761408e565b5b81526020019081526020016000209050806040518060c00160405280600a5481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001600180811115610f0357610f0261408e565b5b81525090806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908360018111156110065761100561408e565b5b021790555050507f95f7e844715189eed0317d8f771c63ce13ec6364f48022f3db86baf8ce584b95600a5433878787600160405161104996959493929190613dc6565b60405180910390a1600a600081548092919061106490614016565b9190505550806001828054905061107b9190613f44565b8154811061108c5761108b6140ec565b5b90600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660018111156111945761119361408e565b5b60018111156111a6576111a561408e565b5b815250509150509392505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561120f57600080fd5b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016112af93929190613b5d565b602060405180830381600087803b1580156112c957600080fd5b505af11580156112dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113019190613784565b611340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133790613c7d565b60405180910390fd5b6113cf81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461301d90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7823383600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516115009493929190613b94565b60405180910390a15050565b6004602052816000526040600020602052806000526040600020600091509150505481565b6115396131a9565b83600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061158d828461303390919063ffffffff16565b60046000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561166d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166490613cdd565b60405180910390fd5b6000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008060018111156116c3576116c261408e565b5b81526020019081526020016000209050806040518060c00160405280600a5481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020016000600181111561173f5761173e61408e565b5b81525090806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908360018111156118425761184161408e565b5b021790555050507f95f7e844715189eed0317d8f771c63ce13ec6364f48022f3db86baf8ce584b95600a5433888787600060405161188596959493929190613dc6565b60405180910390a1600a60008154809291906118a090614016565b919050555080600182805490506118b79190613f44565b815481106118c8576118c76140ec565b5b90600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660018111156119d0576119cf61408e565b5b60018111156119e2576119e161408e565b5b81525050915050949350505050565b60008410158015611a045750600a548411155b611a0d57600080fd5b60025482611a1b9190613eea565b91506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611bc657838290600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166001811115611ba157611ba061408e565b5b6001811115611bb357611bb261408e565b5b8152505081526020019060010190611a8f565b505050509050611bd46131a9565b611bde82876126fe565b90503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614611c1c57600080fd5b8381606001511015611c2d57600080fd5b611c4484826060015161304990919063ffffffff16565b8160600181815250507f6b2a78965102b6dcf63436e21fb398d05a11120cdd8b64e83291405e3387cdf28633878787604051611c84959493929190613d73565b60405180910390a1600081606001511415611e1a576009604051806040016040528060006001811115611cba57611cb961408e565b5b815260200183815250908060018154018082558091505060019003906000526020600020906007020160009091909190915060008201518160000160006101000a81548160ff02191690836001811115611d1757611d1661408e565b5b02179055506020820151816001016000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836001811115611dfc57611dfb61408e565b5b021790555050505050611e196000826000015183604001516104d2565b5b505050505050565b611e2a61305f565b611e3460006130dd565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008410158015611e725750600a548411155b611e7b57600080fd5b60025482611e899190613eea565b91506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561203557838290600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660018111156120105761200f61408e565b5b60018111156120225761202161408e565b5b8152505081526020019060010190611efe565b5050505090506120436131a9565b61204d82876126fe565b90503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff161461208b57600080fd5b838160600151101561209c57600080fd5b6120b384826060015161304990919063ffffffff16565b8160600181815250507f6b2a78965102b6dcf63436e21fb398d05a11120cdd8b64e83291405e3387cdf286338787876040516120f3959493929190613d73565b60405180910390a160008160600151141561228857600960405180604001604052806001808111156121285761212761408e565b5b815260200183815250908060018154018082558091505060019003906000526020600020906007020160009091909190915060008201518160000160006101000a81548160ff021916908360018111156121855761218461408e565b5b02179055506020820151816001016000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083600181111561226a5761226961408e565b5b0217905550505050506122876001826000015183604001516104d2565b5b505050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156122eb57600080fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561237457600080fd5b600b60009054906101000a900460ff16156123c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123bb90613c3d565b60405180910390fd5b6001600b60006101000a81548160ff02191690831515021790555061246e81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461304990919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161258c929190613bd9565b602060405180830381600087803b1580156125a657600080fd5b505af11580156125ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125de9190613784565b6125e757600080fd5b6000600b60006101000a81548160ff0219169083151502179055507ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567823383600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516126b39493929190613b94565b60405180910390a15050565b600581815481106126cf57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6127066131a9565b61270e6131a9565b60005b8451811015612775578385828151811061272e5761272d6140ec565b5b602002602001015160000151141561276257848181518110612753576127526140ec565b5b60200260200101519150612775565b808061276d90614016565b915050612711565b508091505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8060046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287e90613cbd565b60405180910390fd5b600b60009054906101000a900460ff16156128d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128ce90613c3d565b60405180910390fd5b6001600b60006101000a81548160ff0219169083151502179055506129a38160046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461304990919063ffffffff16565b60046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600b60006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff1682604051612a8690613b2d565b60006040518083038185875af1925050503d8060008114612ac3576040519150601f19603f3d011682016040523d82523d6000602084013e612ac8565b606091505b5050905080612b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0390613c9d565b60405180910390fd5b7ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338460046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051612c019493929190613b94565b60405180910390a15050565b60086020528260005260406000206020528160005260406000208181548110612c3557600080fd5b906000526020600020906006020160009250925050508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050160009054906101000a900460ff16905086565b612cc861305f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d2f90613c5d565b60405180910390fd5b612d41816130dd565b50565b612df53460046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461301d90919063ffffffff16565b60046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333460046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051612f8c9493929190613b94565b60405180910390a1565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000818361302b9190613e94565b905092915050565b600081836130419190613eea565b905092915050565b600081836130579190613f44565b905092915050565b6130676131a1565b73ffffffffffffffffffffffffffffffffffffffff16613085611e36565b73ffffffffffffffffffffffffffffffffffffffff16146130db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130d290613cfd565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600060018111156132175761321661408e565b5b81525090565b82805482825590600052602060002090600602810192821561338d5760005260206000209160060282015b8281111561338c578282600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201548160030155600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff021916908360018111156133765761337561408e565b5b0217905550505091600601919060060190613248565b5b50905061339a919061339e565b5090565b5b8082111561342b576000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000905560048201600090556005820160006101000a81549060ff02191690555060060161339f565b5090565b600061344261343d84613e4c565b613e27565b905080838252602082019050828560c086028201111561346557613464614154565b5b60005b85811015613495578161347b888261350c565b845260208401935060c08301925050600181019050613468565b5050509392505050565b6000813590506134ae81614348565b92915050565b600082601f8301126134c9576134c861414a565b5b81356134d984826020860161342f565b91505092915050565b6000815190506134f18161435f565b92915050565b60008135905061350681614376565b92915050565b600060c082840312156135225761352161414f565b5b61352c60c0613e27565b9050600061353c848285016135ac565b60008301525060206135508482850161349f565b60208301525060406135648482850161349f565b6040830152506060613578848285016135ac565b606083015250608061358c848285016135ac565b60808301525060a06135a0848285016134f7565b60a08301525092915050565b6000813590506135bb81614386565b92915050565b6000602082840312156135d7576135d661415e565b5b60006135e58482850161349f565b91505092915050565b600080604083850312156136055761360461415e565b5b60006136138582860161349f565b92505060206136248582860161349f565b9150509250929050565b600080600080608085870312156136485761364761415e565b5b60006136568782880161349f565b94505060206136678782880161349f565b9350506040613678878288016135ac565b9250506060613689878288016135ac565b91505092959194509250565b600080604083850312156136ac576136ab61415e565b5b60006136ba8582860161349f565b92505060206136cb858286016135ac565b9150509250929050565b6000806000606084860312156136ee576136ed61415e565b5b60006136fc8682870161349f565b935050602061370d868287016135ac565b925050604061371e868287016135ac565b9150509250925092565b6000806040838503121561373f5761373e61415e565b5b600083013567ffffffffffffffff81111561375d5761375c614159565b5b613769858286016134b4565b925050602061377a858286016135ac565b9150509250929050565b60006020828403121561379a5761379961415e565b5b60006137a8848285016134e2565b91505092915050565b6000806000606084860312156137ca576137c961415e565b5b60006137d8868287016134f7565b93505060206137e9868287016135ac565b92505060406137fa8682870161349f565b9150509250925092565b60006020828403121561381a5761381961415e565b5b6000613828848285016135ac565b91505092915050565b6000806000806080858703121561384b5761384a61415e565b5b6000613859878288016135ac565b945050602061386a8782880161349f565b935050604061387b878288016135ac565b925050606061388c878288016135ac565b91505092959194509250565b6000806000606084860312156138b1576138b061415e565b5b60006138bf868287016135ac565b93505060206138d0868287016134f7565b92505060406138e18682870161349f565b9150509250925092565b6138f481613f78565b82525050565b61390381613f78565b82525050565b61391281613f8a565b82525050565b61392181613fd3565b82525050565b61393081613fd3565b82525050565b6000613943601f83613e83565b915061394e82614174565b602082019050919050565b6000613966601883613e83565b91506139718261419d565b602082019050919050565b6000613989602683613e83565b9150613994826141c6565b604082019050919050565b60006139ac600a83613e83565b91506139b782614215565b602082019050919050565b60006139cf601583613e83565b91506139da8261423e565b602082019050919050565b60006139f2602483613e83565b91506139fd82614267565b604082019050919050565b6000613a15601d83613e83565b9150613a20826142b6565b602082019050919050565b6000613a38602083613e83565b9150613a43826142df565b602082019050919050565b6000613a5b601a83613e83565b9150613a6682614308565b602082019050919050565b6000613a7e600083613e78565b9150613a8982614331565b600082019050919050565b60c082016000820151613aaa6000850182613b0f565b506020820151613abd60208501826138eb565b506040820151613ad060408501826138eb565b506060820151613ae36060850182613b0f565b506080820151613af66080850182613b0f565b5060a0820151613b0960a0850182613918565b50505050565b613b1881613fc9565b82525050565b613b2781613fc9565b82525050565b6000613b3882613a71565b9150819050919050565b6000602082019050613b5760008301846138fa565b92915050565b6000606082019050613b7260008301866138fa565b613b7f60208301856138fa565b613b8c6040830184613b1e565b949350505050565b6000608082019050613ba960008301876138fa565b613bb660208301866138fa565b613bc36040830185613b1e565b613bd06060830184613b1e565b95945050505050565b6000604082019050613bee60008301856138fa565b613bfb6020830184613b1e565b9392505050565b6000602082019050613c176000830184613909565b92915050565b60006020820190508181036000830152613c3681613936565b9050919050565b60006020820190508181036000830152613c5681613959565b9050919050565b60006020820190508181036000830152613c768161397c565b9050919050565b60006020820190508181036000830152613c968161399f565b9050919050565b60006020820190508181036000830152613cb6816139c2565b9050919050565b60006020820190508181036000830152613cd6816139e5565b9050919050565b60006020820190508181036000830152613cf681613a08565b9050919050565b60006020820190508181036000830152613d1681613a2b565b9050919050565b60006020820190508181036000830152613d3681613a4e565b9050919050565b600060c082019050613d526000830184613a94565b92915050565b6000602082019050613d6d6000830184613b1e565b92915050565b600060a082019050613d886000830188613b1e565b613d9560208301876138fa565b613da260408301866138fa565b613daf6060830185613b1e565b613dbc6080830184613b1e565b9695505050505050565b600060c082019050613ddb6000830189613b1e565b613de860208301886138fa565b613df560408301876138fa565b613e026060830186613b1e565b613e0f6080830185613b1e565b613e1c60a0830184613927565b979650505050505050565b6000613e31613e42565b9050613e3d8282613fe5565b919050565b6000604051905090565b600067ffffffffffffffff821115613e6757613e6661411b565b5b602082029050602081019050919050565b600081905092915050565b600082825260208201905092915050565b6000613e9f82613fc9565b9150613eaa83613fc9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613edf57613ede61405f565b5b828201905092915050565b6000613ef582613fc9565b9150613f0083613fc9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f3957613f3861405f565b5b828202905092915050565b6000613f4f82613fc9565b9150613f5a83613fc9565b925082821015613f6d57613f6c61405f565b5b828203905092915050565b6000613f8382613fa9565b9050919050565b60008115159050919050565b6000819050613fa482614334565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613fde82613f96565b9050919050565b613fee82614163565b810181811067ffffffffffffffff8211171561400d5761400c61411b565b5b80604052505050565b600061402182613fc9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156140545761405361405f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f496e73756666696369656e7420746f6b656e7320696e2065786368616e676500600082015250565b7f5265656e7472616e742063616c6c206465746563746564210000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4572726f72206865726500000000000000000000000000000000000000000000600082015250565b7f6661696c656420746f2073656e6420616d6f756e740000000000000000000000600082015250565b7f496e73756666696369656e742062616c616e63652045544820746f207769746860008201527f6472617700000000000000000000000000000000000000000000000000000000602082015250565b7f496e73756666696369656e74205553444320696e2065786368616e6765000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e76616c6964204f7264657220494420746f2063616e63656c000000000000600082015250565b50565b600281106143455761434461408e565b5b50565b61435181613f78565b811461435c57600080fd5b50565b61436881613f8a565b811461437357600080fd5b50565b6002811061438357600080fd5b50565b61438f81613fc9565b811461439a57600080fd5b5056fea2646970667358221220ef80dc098e6c0593611cfc6164f1c8e1cd0724267940e961b75bf5b7963bd1b564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Cancel(uint256,address,address,uint256,uint256)": {
        "notice": "Event when an order is cancelled"
      },
      "Order(uint256,address,address,uint256,uint256,uint8)": {
        "notice": "Event when an order is placed on an exchange"
      },
      "Withdraw(address,address,uint256,uint256)": {
        "notice": "Event when amount withdrawn exchange"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1196,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "Owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1201,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "decimals",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1204,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)236"
      },
      {
        "astId": 1210,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "tokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1213,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "tokenList",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1219,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "ethToken",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1221,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "usdc",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1229,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "orderBook",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(_Order)1252_storage)dyn_storage))"
      },
      {
        "astId": 1233,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "filledOrders",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(_filledOrder)1259_storage)dyn_storage"
      },
      {
        "astId": 1236,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "orderId",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1238,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "locked",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(_Order)1252_storage)dyn_storage": {
        "base": "t_struct(_Order)1252_storage",
        "encoding": "dynamic_array",
        "label": "struct Exchange._Order[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(_filledOrder)1259_storage)dyn_storage": {
        "base": "t_struct(_filledOrder)1259_storage",
        "encoding": "dynamic_array",
        "label": "struct Exchange._filledOrder[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)236": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Side)1262": {
        "encoding": "inplace",
        "label": "enum Exchange.Side",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(_Order)1252_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Exchange._Order[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(_Order)1252_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_struct(_Order)1252_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Exchange._Order[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(_Order)1252_storage)dyn_storage"
      },
      "t_struct(_Order)1252_storage": {
        "encoding": "inplace",
        "label": "struct Exchange._Order",
        "members": [
          {
            "astId": 1240,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1242,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "user",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1244,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "token",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1246,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1248,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1251,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "side",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(Side)1262"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(_filledOrder)1259_storage": {
        "encoding": "inplace",
        "label": "struct Exchange._filledOrder",
        "members": [
          {
            "astId": 1255,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "side",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Side)1262"
          },
          {
            "astId": 1258,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "order",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(_Order)1252_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}