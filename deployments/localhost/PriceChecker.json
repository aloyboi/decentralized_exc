{
  "address": "0x19cEcCd6942ad38562Ee10bAfd44776ceB67e923",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "priceFeeds",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa895adac96452db2f2a730c6e9788f805092bcc5955a47d4fbad8a7775a829fa",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x19cEcCd6942ad38562Ee10bAfd44776ceB67e923",
    "transactionIndex": 0,
    "gasUsed": "1144135",
    "logsBloom": "0x
    "blockHash": "0x571f876d5c32b51d67eeeb04eaecd4d06ebc279ae66770c6ae8964bc65eedff4",
    "transactionHash": "0xa895adac96452db2f2a730c6e9788f805092bcc5955a47d4fbad8a7775a829fa",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 142,
        "transactionHash": "0xa895adac96452db2f2a730c6e9788f805092bcc5955a47d4fbad8a7775a829fa",
        "address": "0x19cEcCd6942ad38562Ee10bAfd44776ceB67e923",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x571f876d5c32b51d67eeeb04eaecd4d06ebc279ae66770c6ae8964bc65eedff4"
      }
    ],
    "blockNumber": 142,
    "cumulativeGasUsed": "1144135",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7d2d35754a7e4cc8778d6b1714102511",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceChecker.sol\":\"PriceChecker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PriceChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\ncontract PriceChecker is Ownable {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    _priceFeed[] public priceFeeds;\\r\\n\\r\\n    struct _priceFeed {\\r\\n        string name;\\r\\n        AggregatorV3Interface priceFeed;\\r\\n    }\\r\\n\\r\\n    function addPriceFeed(string memory _name, address _address)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _priceFeed[] memory pricefeed = priceFeeds;\\r\\n        bool isAdded = false;\\r\\n        for (uint256 i = 0; i < pricefeed.length; i++) {\\r\\n            if (\\r\\n                keccak256(abi.encodePacked(_name)) ==\\r\\n                keccak256(abi.encodePacked(pricefeed[i].name))\\r\\n            ) {\\r\\n                isAdded = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(!isAdded, \\\"Price Feed already added\\\");\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(_address);\\r\\n        priceFeeds.push(_priceFeed(_name, priceFeed));\\r\\n    }\\r\\n\\r\\n    function getPriceFeed(string memory _name) external view returns (AggregatorV3Interface priceFeed) {\\r\\n            _priceFeed[] memory pricefeed = priceFeeds;\\r\\n\\r\\n             for (uint256 i = 0; i < pricefeed.length; i++) {\\r\\n            if (\\r\\n                keccak256(abi.encodePacked(_name)) ==\\r\\n                keccak256(abi.encodePacked(pricefeed[i].name))\\r\\n            ) {\\r\\n                return pricefeed[i].priceFeed;\\r\\n            }\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function getPrice(AggregatorV3Interface priceFeed)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Goerli ETH / USD Address\\r\\n        // https://docs.chain.link/docs/ethereum-addresses/\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\r\\n        // );\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer);\\r\\n        // or (Both will do the same thing)\\r\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x948aae997afbe94c3cb6f4ca91622b30cc94d6e5453bc0913ec8cd12430b79ef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61134b8061010d6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100ff5780638da5cb5b14610109578063b50584b314610127578063f2fde38b146101575761007d565b80630dc16e1f1461008257806310c7f0b91461009e57806341976e09146100cf575b600080fd5b61009c60048036038101906100979190610c15565b610173565b005b6100b860048036038101906100b39190610c71565b610464565b6040516100c6929190610e66565b60405180910390f35b6100e960048036038101906100e49190610b9f565b610540565b6040516100f69190610ef6565b60405180910390f35b6101076105d0565b005b6101116105e4565b60405161011e9190610e30565b60405180910390f35b610141600480360381019061013c9190610bcc565b61060d565b60405161014e9190610e4b565b60405180910390f35b610171600480360381019061016c9190610b72565b610813565b005b61017b610897565b60006001805480602002602001604051908101604052809291908181526020016000905b828210156102b957838290600052602060002090600202016040518060400160405290816000820180546101d290611074565b80601f01602080910402602001604051908101604052809291908181526020018280546101fe90611074565b801561024b5780601f106102205761010080835404028352916020019161024b565b820191906000526020600020905b81548152906001019060200180831161022e57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508152602001906001019061019f565b5050505090506000805b825181101561035a578281815181106102df576102de61117e565b5b6020026020010151600001516040516020016102fb9190610e19565b60405160208183030381529060405280519060200120856040516020016103229190610e19565b604051602081830303815290604052805190602001201415610347576001915061035a565b8080610352906110d7565b9150506102c3565b50801561039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039390610eb6565b60405180910390fd5b6000839050600160405180604001604052808781526020018373ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190805190602001906104139291906109e1565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050565b6001818154811061047457600080fd5b906000526020600020906002020160009150905080600001805461049790611074565b80601f01602080910402602001604051908101604052809291908181526020018280546104c390611074565b80156105105780601f106104e557610100808354040283529160200191610510565b820191906000526020600020905b8154815290600101906020018083116104f357829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561058957600080fd5b505afa15801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c19190610c9e565b50505091505080915050919050565b6105d8610897565b6105e26000610915565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806001805480602002602001604051908101604052809291908181526020016000905b8282101561074c578382906000526020600020906002020160405180604001604052908160008201805461066590611074565b80601f016020809104026020016040519081016040528092919081815260200182805461069190611074565b80156106de5780601f106106b3576101008083540402835291602001916106de565b820191906000526020600020905b8154815290600101906020018083116106c157829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190610632565b50505050905060005b815181101561080b578181815181106107715761077061117e565b5b60200260200101516000015160405160200161078d9190610e19565b60405160208183030381529060405280519060200120846040516020016107b49190610e19565b6040516020818303038152906040528051906020012014156107f8578181815181106107e3576107e261117e565b5b6020026020010151602001519250505061080e565b8080610803906110d7565b915050610755565b50505b919050565b61081b610897565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088290610e96565b60405180910390fd5b61089481610915565b50565b61089f6109d9565b73ffffffffffffffffffffffffffffffffffffffff166108bd6105e4565b73ffffffffffffffffffffffffffffffffffffffff1614610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a90610ed6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b8280546109ed90611074565b90600052602060002090601f016020900481019282610a0f5760008555610a56565b82601f10610a2857805160ff1916838001178555610a56565b82800160010185558215610a56579182015b82811115610a55578251825591602001919060010190610a3a565b5b509050610a639190610a67565b5090565b5b80821115610a80576000816000905550600101610a68565b5090565b6000610a97610a9284610f36565b610f11565b905082815260208101848484011115610ab357610ab26111e1565b5b610abe848285611032565b509392505050565b600081359050610ad5816112a2565b92915050565b600081359050610aea816112b9565b92915050565b600081519050610aff816112d0565b92915050565b600082601f830112610b1a57610b196111dc565b5b8135610b2a848260208601610a84565b91505092915050565b600081359050610b42816112e7565b92915050565b600081519050610b57816112e7565b92915050565b600081519050610b6c816112fe565b92915050565b600060208284031215610b8857610b876111eb565b5b6000610b9684828501610ac6565b91505092915050565b600060208284031215610bb557610bb46111eb565b5b6000610bc384828501610adb565b91505092915050565b600060208284031215610be257610be16111eb565b5b600082013567ffffffffffffffff811115610c0057610bff6111e6565b5b610c0c84828501610b05565b91505092915050565b60008060408385031215610c2c57610c2b6111eb565b5b600083013567ffffffffffffffff811115610c4a57610c496111e6565b5b610c5685828601610b05565b9250506020610c6785828601610ac6565b9150509250929050565b600060208284031215610c8757610c866111eb565b5b6000610c9584828501610b33565b91505092915050565b600080600080600060a08688031215610cba57610cb96111eb565b5b6000610cc888828901610b5d565b9550506020610cd988828901610af0565b9450506040610cea88828901610b48565b9350506060610cfb88828901610b48565b9250506080610d0c88828901610b5d565b9150509295509295909350565b610d2281610f8e565b82525050565b610d3181610ffc565b82525050565b6000610d4282610f67565b610d4c8185610f72565b9350610d5c818560208601611041565b610d65816111f0565b840191505092915050565b6000610d7b82610f67565b610d858185610f83565b9350610d95818560208601611041565b80840191505092915050565b6000610dae602683610f72565b9150610db982611201565b604082019050919050565b6000610dd1601883610f72565b9150610ddc82611250565b602082019050919050565b6000610df4602083610f72565b9150610dff82611279565b602082019050919050565b610e1381610fdc565b82525050565b6000610e258284610d70565b915081905092915050565b6000602082019050610e456000830184610d19565b92915050565b6000602082019050610e606000830184610d28565b92915050565b60006040820190508181036000830152610e808185610d37565b9050610e8f6020830184610d28565b9392505050565b60006020820190508181036000830152610eaf81610da1565b9050919050565b60006020820190508181036000830152610ecf81610dc4565b9050919050565b60006020820190508181036000830152610eef81610de7565b9050919050565b6000602082019050610f0b6000830184610e0a565b92915050565b6000610f1b610f2c565b9050610f2782826110a6565b919050565b6000604051905090565b600067ffffffffffffffff821115610f5157610f506111ad565b5b610f5a826111f0565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610f9982610fbc565b9050919050565b6000610fab82610f8e565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b60006110078261100e565b9050919050565b600061101982611020565b9050919050565b600061102b82610fbc565b9050919050565b82818337600083830152505050565b60005b8381101561105f578082015181840152602081019050611044565b8381111561106e576000848401525b50505050565b6000600282049050600182168061108c57607f821691505b602082108114156110a05761109f61114f565b5b50919050565b6110af826111f0565b810181811067ffffffffffffffff821117156110ce576110cd6111ad565b5b80604052505050565b60006110e282610fdc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561111557611114611120565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5072696365204665656420616c72656164792061646465640000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6112ab81610f8e565b81146112b657600080fd5b50565b6112c281610fa0565b81146112cd57600080fd5b50565b6112d981610fb2565b81146112e457600080fd5b50565b6112f081610fdc565b81146112fb57600080fd5b50565b61130781610fe6565b811461131257600080fd5b5056fea26469706673582212206de605bac84c58155985f82c6ccf012d348cbb9364478139157e40d9d3f46a3264736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100ff5780638da5cb5b14610109578063b50584b314610127578063f2fde38b146101575761007d565b80630dc16e1f1461008257806310c7f0b91461009e57806341976e09146100cf575b600080fd5b61009c60048036038101906100979190610c15565b610173565b005b6100b860048036038101906100b39190610c71565b610464565b6040516100c6929190610e66565b60405180910390f35b6100e960048036038101906100e49190610b9f565b610540565b6040516100f69190610ef6565b60405180910390f35b6101076105d0565b005b6101116105e4565b60405161011e9190610e30565b60405180910390f35b610141600480360381019061013c9190610bcc565b61060d565b60405161014e9190610e4b565b60405180910390f35b610171600480360381019061016c9190610b72565b610813565b005b61017b610897565b60006001805480602002602001604051908101604052809291908181526020016000905b828210156102b957838290600052602060002090600202016040518060400160405290816000820180546101d290611074565b80601f01602080910402602001604051908101604052809291908181526020018280546101fe90611074565b801561024b5780601f106102205761010080835404028352916020019161024b565b820191906000526020600020905b81548152906001019060200180831161022e57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508152602001906001019061019f565b5050505090506000805b825181101561035a578281815181106102df576102de61117e565b5b6020026020010151600001516040516020016102fb9190610e19565b60405160208183030381529060405280519060200120856040516020016103229190610e19565b604051602081830303815290604052805190602001201415610347576001915061035a565b8080610352906110d7565b9150506102c3565b50801561039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039390610eb6565b60405180910390fd5b6000839050600160405180604001604052808781526020018373ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190805190602001906104139291906109e1565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050565b6001818154811061047457600080fd5b906000526020600020906002020160009150905080600001805461049790611074565b80601f01602080910402602001604051908101604052809291908181526020018280546104c390611074565b80156105105780601f106104e557610100808354040283529160200191610510565b820191906000526020600020905b8154815290600101906020018083116104f357829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561058957600080fd5b505afa15801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c19190610c9e565b50505091505080915050919050565b6105d8610897565b6105e26000610915565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806001805480602002602001604051908101604052809291908181526020016000905b8282101561074c578382906000526020600020906002020160405180604001604052908160008201805461066590611074565b80601f016020809104026020016040519081016040528092919081815260200182805461069190611074565b80156106de5780601f106106b3576101008083540402835291602001916106de565b820191906000526020600020905b8154815290600101906020018083116106c157829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190610632565b50505050905060005b815181101561080b578181815181106107715761077061117e565b5b60200260200101516000015160405160200161078d9190610e19565b60405160208183030381529060405280519060200120846040516020016107b49190610e19565b6040516020818303038152906040528051906020012014156107f8578181815181106107e3576107e261117e565b5b6020026020010151602001519250505061080e565b8080610803906110d7565b915050610755565b50505b919050565b61081b610897565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088290610e96565b60405180910390fd5b61089481610915565b50565b61089f6109d9565b73ffffffffffffffffffffffffffffffffffffffff166108bd6105e4565b73ffffffffffffffffffffffffffffffffffffffff1614610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a90610ed6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b8280546109ed90611074565b90600052602060002090601f016020900481019282610a0f5760008555610a56565b82601f10610a2857805160ff1916838001178555610a56565b82800160010185558215610a56579182015b82811115610a55578251825591602001919060010190610a3a565b5b509050610a639190610a67565b5090565b5b80821115610a80576000816000905550600101610a68565b5090565b6000610a97610a9284610f36565b610f11565b905082815260208101848484011115610ab357610ab26111e1565b5b610abe848285611032565b509392505050565b600081359050610ad5816112a2565b92915050565b600081359050610aea816112b9565b92915050565b600081519050610aff816112d0565b92915050565b600082601f830112610b1a57610b196111dc565b5b8135610b2a848260208601610a84565b91505092915050565b600081359050610b42816112e7565b92915050565b600081519050610b57816112e7565b92915050565b600081519050610b6c816112fe565b92915050565b600060208284031215610b8857610b876111eb565b5b6000610b9684828501610ac6565b91505092915050565b600060208284031215610bb557610bb46111eb565b5b6000610bc384828501610adb565b91505092915050565b600060208284031215610be257610be16111eb565b5b600082013567ffffffffffffffff811115610c0057610bff6111e6565b5b610c0c84828501610b05565b91505092915050565b60008060408385031215610c2c57610c2b6111eb565b5b600083013567ffffffffffffffff811115610c4a57610c496111e6565b5b610c5685828601610b05565b9250506020610c6785828601610ac6565b9150509250929050565b600060208284031215610c8757610c866111eb565b5b6000610c9584828501610b33565b91505092915050565b600080600080600060a08688031215610cba57610cb96111eb565b5b6000610cc888828901610b5d565b9550506020610cd988828901610af0565b9450506040610cea88828901610b48565b9350506060610cfb88828901610b48565b9250506080610d0c88828901610b5d565b9150509295509295909350565b610d2281610f8e565b82525050565b610d3181610ffc565b82525050565b6000610d4282610f67565b610d4c8185610f72565b9350610d5c818560208601611041565b610d65816111f0565b840191505092915050565b6000610d7b82610f67565b610d858185610f83565b9350610d95818560208601611041565b80840191505092915050565b6000610dae602683610f72565b9150610db982611201565b604082019050919050565b6000610dd1601883610f72565b9150610ddc82611250565b602082019050919050565b6000610df4602083610f72565b9150610dff82611279565b602082019050919050565b610e1381610fdc565b82525050565b6000610e258284610d70565b915081905092915050565b6000602082019050610e456000830184610d19565b92915050565b6000602082019050610e606000830184610d28565b92915050565b60006040820190508181036000830152610e808185610d37565b9050610e8f6020830184610d28565b9392505050565b60006020820190508181036000830152610eaf81610da1565b9050919050565b60006020820190508181036000830152610ecf81610dc4565b9050919050565b60006020820190508181036000830152610eef81610de7565b9050919050565b6000602082019050610f0b6000830184610e0a565b92915050565b6000610f1b610f2c565b9050610f2782826110a6565b919050565b6000604051905090565b600067ffffffffffffffff821115610f5157610f506111ad565b5b610f5a826111f0565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610f9982610fbc565b9050919050565b6000610fab82610f8e565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b60006110078261100e565b9050919050565b600061101982611020565b9050919050565b600061102b82610fbc565b9050919050565b82818337600083830152505050565b60005b8381101561105f578082015181840152602081019050611044565b8381111561106e576000848401525b50505050565b6000600282049050600182168061108c57607f821691505b602082108114156110a05761109f61114f565b5b50919050565b6110af826111f0565b810181811067ffffffffffffffff821117156110ce576110cd6111ad565b5b80604052505050565b60006110e282610fdc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561111557611114611120565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5072696365204665656420616c72656164792061646465640000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6112ab81610f8e565b81146112b657600080fd5b50565b6112c281610fa0565b81146112cd57600080fd5b50565b6112d981610fb2565b81146112e457600080fd5b50565b6112f081610fdc565b81146112fb57600080fd5b50565b61130781610fe6565b811461131257600080fd5b5056fea26469706673582212206de605bac84c58155985f82c6ccf012d348cbb9364478139157e40d9d3f46a3264736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/PriceChecker.sol:PriceChecker",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 190,
        "contract": "contracts/PriceChecker.sol:PriceChecker",
        "label": "priceFeeds",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(_priceFeed)196_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(_priceFeed)196_storage)dyn_storage": {
        "base": "t_struct(_priceFeed)196_storage",
        "encoding": "dynamic_array",
        "label": "struct PriceChecker._priceFeed[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(_priceFeed)196_storage": {
        "encoding": "inplace",
        "label": "struct PriceChecker._priceFeed",
        "members": [
          {
            "astId": 192,
            "contract": "contracts/PriceChecker.sol:PriceChecker",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 195,
            "contract": "contracts/PriceChecker.sol:PriceChecker",
            "label": "priceFeed",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(AggregatorV3Interface)45"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}