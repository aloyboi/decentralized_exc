{
  "language": "Solidity",
  "sources": {
    "contracts/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/testUSDC.sol": {
      "content": "/* ERC 20 constructor takes in 2 strings, feel free to change the first string to the name of your token name, and the second string to the corresponding symbol for your custom token name */\r\n// SPDX-License-Identifier: MIT\r\nimport \"./ERC20.sol\";\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract testUSDC is ERC20 {\r\n    constructor(uint256 _initial_supply) ERC20(\"testUSDC\", \"tUSDC\") {\r\n        _mint(msg.sender, _initial_supply);\r\n    }\r\n}\r\n"
    },
    "contracts/Exchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ERC20.sol\";\r\nimport \"./testUSDC.sol\";\r\n\r\n/// @notice Library SafeMath used to prevent overflows and underflows\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract Exchange is Ownable {\r\n    using SafeMath for uint256; //for prevention of integer overflow\r\n\r\n    address public Owner;\r\n    uint256 decimals = 10**18;\r\n    IERC20 token;\r\n    //Deposit in contract\r\n    mapping(address => mapping(address => uint256)) public tokens; //tokenAdress -> msg.sender -> tokenAmt\r\n\r\n    //Token Address List available in DEX\r\n    address[] public tokenList;\r\n    address ethToken = address(0);\r\n    address usdc;\r\n\r\n    //orderBook mappping: tokenAddress -> Side -> Order Array\r\n    mapping(address => mapping(uint256 => _Order[])) public orderBook;\r\n\r\n    _filledOrder[] filledOrders; //array of filled orders\r\n\r\n    uint256 public orderId = 0;\r\n\r\n    // AggregatorV3Interface private ethUsdPriceFeed;\r\n    // AggregatorV3Interface private btcUsdPriceFeed;\r\n\r\n    //For prevention of reentrancy\r\n    bool internal locked;\r\n\r\n    //Custom Errors\r\n\r\n    //Structs representing an order has unique id, user and amounts to give and get between two tokens to exchange\r\n    struct _Order {\r\n        uint256 id;\r\n        address user;\r\n        address token;\r\n        uint256 amount;\r\n        uint256 price; //in usdc\r\n        Side side;\r\n    }\r\n\r\n    struct _filledOrder {\r\n        Side side;\r\n        _Order order;\r\n    }\r\n\r\n    enum Side {\r\n        BUY,\r\n        SELL\r\n    }\r\n\r\n    //add events\r\n    event Deposit(address token, address user, uint256 amount, uint256 balance);\r\n\r\n    /// @notice Event when amount withdrawn exchange\r\n    event Withdraw(\r\n        address token,\r\n        address user,\r\n        uint256 amount,\r\n        uint256 balance\r\n    );\r\n\r\n    /// @notice Event when an order is placed on an exchange\r\n    event Order(\r\n        uint256 id,\r\n        address user,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 price,\r\n        Side side\r\n    );\r\n\r\n    /// @notice Event when an order is cancelled\r\n    event Cancel(\r\n        uint256 id,\r\n        address user,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 price\r\n    );\r\n\r\n    event Fill(\r\n        uint256 id,\r\n        address user,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 price\r\n    );\r\n\r\n    constructor() {\r\n        Owner = msg.sender;\r\n        // ethUsdPriceFeed = AggregatorV3Interface(_ethUsdPriceFeed);\r\n        // btcUsdPriceFeed = AggregatorV3Interface(_btcUsdPriceFeed);\r\n    }\r\n\r\n    function depositETH() public payable {\r\n        tokens[ethToken][msg.sender] = tokens[ethToken][msg.sender].add(\r\n            msg.value\r\n        );\r\n        emit Deposit(\r\n            ethToken,\r\n            msg.sender,\r\n            msg.value,\r\n            tokens[ethToken][msg.sender]\r\n        );\r\n    }\r\n\r\n    function withdrawETH(uint256 _amount) public {\r\n        //_amount = _amount * decimals;\r\n        require(\r\n            tokens[ethToken][msg.sender] >= _amount,\r\n            \"Insufficient balance ETH to withdraw\"\r\n        );\r\n        require(!locked, \"Reentrant call detected!\");\r\n        locked = true;\r\n        tokens[ethToken][msg.sender] = tokens[ethToken][msg.sender].sub(\r\n            _amount\r\n        );\r\n        locked = false;\r\n        (bool success, ) = msg.sender.call{value: _amount}(\"\");\r\n        require(success, \"failed to send amount\");\r\n\r\n        emit Withdraw(\r\n            ethToken,\r\n            msg.sender,\r\n            _amount,\r\n            tokens[ethToken][msg.sender]\r\n        );\r\n    }\r\n\r\n    //from and transferFrom is from ERC20 contract\r\n    //_token should be an ERC20 token\r\n    function depositToken(address _token, uint256 _amount) public {\r\n        require(_token != ethToken);\r\n        //need to add a check to prove that it is an ERC20 token\r\n        token = IERC20(_token);\r\n        require(\r\n            token.transferFrom(msg.sender, address(this), _amount),\r\n            \"Error here\"\r\n        );\r\n        tokens[_token][msg.sender] = tokens[_token][msg.sender].add(_amount);\r\n        emit Deposit(_token, msg.sender, _amount, tokens[_token][msg.sender]);\r\n    }\r\n\r\n    function withdrawToken(address _token, uint256 _amount) public {\r\n        require(_token != ethToken);\r\n        require(tokens[_token][msg.sender] >= _amount);\r\n        require(!locked, \"Reentrant call detected!\");\r\n        locked = true;\r\n        tokens[_token][msg.sender] = tokens[_token][msg.sender].sub(_amount);\r\n        token = IERC20(_token);\r\n        require(token.transfer(msg.sender, _amount));\r\n        locked = false;\r\n        emit Withdraw(_token, msg.sender, _amount, tokens[_token][msg.sender]);\r\n    }\r\n\r\n    //balance of specific tokens in the dex owned by specific user\r\n    function balanceOf(address _token, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return tokens[_token][_user];\r\n    }\r\n\r\n    //For Buyer, when making buy order they deposit usdc and receive token of choice\r\n    //For seller, when making sell order, they deposit token of choice and receive usdc\r\n    function createLimitBuyOrder(\r\n        address _token,\r\n        address _testUSDC,\r\n        uint256 _amount,\r\n        uint256 _price //in usdc/token\r\n    ) public returns (_Order memory) {\r\n        //Amount user has deposited in the DEX must be >= value he wants to buy\r\n        usdc = _testUSDC;\r\n        require(\r\n            tokens[usdc][msg.sender] >= _amount.mul(_price),\r\n            \"Insufficient USDC in exchange\"\r\n        );\r\n\r\n        _Order[] storage _order = orderBook[_token][uint256(Side.BUY)];\r\n        _order.push(\r\n            _Order(orderId, msg.sender, _token, _amount, _price, Side.BUY)\r\n        );\r\n\r\n        emit Order(orderId, msg.sender, _token, _amount, _price, Side.BUY);\r\n\r\n        orderId++;\r\n\r\n        return _order[_order.length - 1];\r\n    }\r\n\r\n    function createLimitSellOrder(\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _price //in usdc/token\r\n    ) public returns (_Order memory) {\r\n        _amount = _amount * decimals;\r\n        //Amount of tokens user deposit in DEX must be >= the amount of tokens they want to sell\r\n        require(\r\n            tokens[_token][msg.sender] >= _amount,\r\n            \"Insufficient tokens in exchange\"\r\n        );\r\n\r\n        _Order[] storage _order = orderBook[_token][uint256(Side.SELL)];\r\n        _order.push(\r\n            _Order(orderId, msg.sender, _token, _amount, _price, Side.SELL)\r\n        );\r\n\r\n        emit Order(orderId, msg.sender, _token, _amount, _price, Side.SELL);\r\n\r\n        orderId++;\r\n\r\n        return _order[_order.length - 1];\r\n    }\r\n\r\n    function cancelOrder(\r\n        Side side,\r\n        uint256 _id,\r\n        address _token\r\n    ) public {\r\n        require(_id >= 0 && _id <= orderId, \"Invalid Order ID to cancel\");\r\n        _Order[] storage _order = orderBook[_token][uint256(side)];\r\n        _Order memory order;\r\n\r\n        uint256 index;\r\n        for (uint256 i = 0; i < _order.length; i++) {\r\n            if (_order[i].id == _id) {\r\n                index = i;\r\n                order = _order[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (uint256 j = index; j < _order.length - 1; j++) {\r\n            _order[j] = _order[j + 1];\r\n        }\r\n        delete _order[_order.length - 1];\r\n        _order.pop();\r\n\r\n        uint256 amount = order.amount * decimals;\r\n        uint256 price = order.price;\r\n        require(address(order.user) == msg.sender);\r\n\r\n        orderBook[_token][uint256(side)] = _order;\r\n\r\n        emit Cancel(_id, msg.sender, _token, amount, price);\r\n    }\r\n\r\n    function fillBuyOrder(\r\n        uint256 _id,\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _price\r\n    ) public {\r\n        require(_id >= 0 && _id <= orderId);\r\n        _amount = _amount * decimals;\r\n        _Order[] memory _order = orderBook[_token][0];\r\n        _Order memory order;\r\n\r\n        order = getOrderFromArray(_order, _id);\r\n\r\n        require(order.user == msg.sender);\r\n        require(order.amount >= _amount);\r\n        order.amount = order.amount.sub(_amount);\r\n\r\n        emit Fill(_id, msg.sender, _token, _amount, _price);\r\n\r\n        if (order.amount == 0) {\r\n            filledOrders.push(_filledOrder(Side.BUY, order));\r\n            cancelOrder(Side.BUY, order.id, order.token); //remove filled orders\r\n        }\r\n    }\r\n\r\n    function fillSellOrder(\r\n        uint256 _id,\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _price\r\n    ) public {\r\n        require(_id >= 0 && _id <= orderId);\r\n        _amount = _amount * decimals;\r\n        _Order[] memory _order = orderBook[_token][1];\r\n        _Order memory order;\r\n\r\n        order = getOrderFromArray(_order, _id);\r\n\r\n        require(order.user == msg.sender);\r\n        require(order.amount >= _amount);\r\n        order.amount = order.amount.sub(_amount);\r\n\r\n        emit Fill(_id, msg.sender, _token, _amount, _price);\r\n\r\n        if (order.amount == 0) {\r\n            filledOrders.push(_filledOrder(Side.SELL, order));\r\n            cancelOrder(Side.SELL, order.id, order.token); //remove filled orders\r\n        }\r\n    }\r\n\r\n    // function removeFilledOrders() public {\r\n    //     for (uint256 i = 0; i < filledOrders.length; i++) {\r\n    //         address token = (filledOrders[i].order).token;\r\n    //         uint256 id = (filledOrders[i].order).id;\r\n\r\n    //         if (filledOrders[i].side == Side.BUY) {\r\n    //             delete (buyOrders[token][id]);\r\n    //         } else if (filledOrders[i].side == Side.SELL) {\r\n    //             delete (sellOrders[token][id]);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    function matchOrders(\r\n        address _token,\r\n        uint256 _id,\r\n        Side side\r\n    ) internal {\r\n        //when order is filled,\r\n        //BUY Side => deduct USDC from balance, sent token to balance, order updated.\r\n        //SELL Side =>deduct token from balance, sent USDC from DEX, order updated.\r\n        uint256 saleTokenAmt;\r\n\r\n        if (side == Side.BUY) {\r\n            //Retrieve buy order to be filled\r\n            _Order[] memory _order = orderBook[_token][0];\r\n            _Order memory buyOrderToFill = getOrderFromArray(_order, _id);\r\n            uint256 limitPrice = buyOrderToFill.price;\r\n            uint256 amountTokens = buyOrderToFill.amount;\r\n            address owner = buyOrderToFill.user;\r\n\r\n            //Retrieve sell order to match\r\n            _Order[] storage _sellOrder = orderBook[_token][1];\r\n            for (uint256 i = 0; i < _sellOrder.length; i++) {\r\n                //sell order hit buyer's limit price\r\n                if (_sellOrder[i].price <= limitPrice) {\r\n                    uint256 sellId = _sellOrder[i].id;\r\n                    uint256 sellPrice = _sellOrder[i].price;\r\n                    uint256 sellTokenAmt = _sellOrder[i].amount;\r\n                    address seller = _sellOrder[i].user;\r\n\r\n                    //if buyer's amount to buy > seller's amount to sell\r\n                    if (amountTokens > sellTokenAmt) {\r\n                        saleTokenAmt = sellTokenAmt;\r\n                    }\r\n                    //if seller's amount to sell >= buyer's amount to buy\r\n                    else if (amountTokens <= sellTokenAmt) {\r\n                        saleTokenAmt = amountTokens;\r\n                    }\r\n\r\n                    //Verify current balance\r\n                    require(\r\n                        tokens[usdc][owner] >= amountTokens.mul(sellPrice),\r\n                        \"Buyer currently does not have enough USDC Balance\"\r\n                    );\r\n                    require(\r\n                        tokens[_token][seller] >= amountTokens,\r\n                        \"Seller currently does not have enough Token Balance\"\r\n                    );\r\n\r\n                    //update orders\r\n                    fillBuyOrder(_id, _token, saleTokenAmt, sellPrice);\r\n                    fillSellOrder(sellId, _token, saleTokenAmt, sellPrice);\r\n\r\n                    //buyer update\r\n                    //require(owner==msg.sender);\r\n                    tokens[_token][owner] = tokens[_token][owner].add(\r\n                        saleTokenAmt\r\n                    );\r\n                    tokens[usdc][owner] = tokens[usdc][owner].sub(\r\n                        sellPrice.mul(saleTokenAmt)\r\n                    );\r\n\r\n                    //seller update\r\n                    tokens[_token][seller] = tokens[_token][seller].sub(\r\n                        saleTokenAmt\r\n                    );\r\n                    tokens[usdc][seller] = tokens[usdc][seller].add(\r\n                        sellPrice.mul(saleTokenAmt)\r\n                    );\r\n                }\r\n\r\n                if (buyOrderToFill.amount == 0) break;\r\n            }\r\n        } else if (side == Side.SELL) {\r\n            //Retrieve buy order to be filled\r\n            _Order[] memory _order = orderBook[_token][1];\r\n            _Order memory sellOrderToFill = getOrderFromArray(_order, _id);\r\n            uint256 limitPrice = sellOrderToFill.price;\r\n            uint256 amountTokens = sellOrderToFill.amount;\r\n            address owner = sellOrderToFill.user;\r\n\r\n            //Retrieve sell order to match\r\n            _Order[] storage _buyOrder = orderBook[_token][0];\r\n            for (uint256 i = 0; i < _buyOrder.length; i++) {\r\n                //sell order hit buyer's limit price\r\n                if (_buyOrder[i].price >= limitPrice) {\r\n                    uint256 buyId = _buyOrder[i].id;\r\n                    uint256 buyPrice = _buyOrder[i].price;\r\n                    uint256 buyTokenAmt = _buyOrder[i].amount;\r\n                    address buyer = _buyOrder[i].user;\r\n\r\n                    //if seller's amount to sell > buyer's amount to buy\r\n                    if (amountTokens > buyTokenAmt) {\r\n                        saleTokenAmt = buyTokenAmt;\r\n                    }\r\n                    //if buyer's amount to buy > seller's amount to sell\r\n                    else if (amountTokens <= buyTokenAmt) {\r\n                        saleTokenAmt = amountTokens;\r\n                    }\r\n\r\n                    //Verify current balance\r\n                    require(\r\n                        tokens[_token][owner] >= amountTokens,\r\n                        \"Seller currently does not have enough Token Balance\"\r\n                    );\r\n                    require(\r\n                        tokens[usdc][buyer] >= amountTokens.mul(buyPrice),\r\n                        \"Buyer currently does not have enough USDC Balance\"\r\n                    );\r\n\r\n                    //update orders\r\n                    fillSellOrder(_id, _token, saleTokenAmt, buyPrice);\r\n                    fillBuyOrder(buyId, _token, saleTokenAmt, buyPrice);\r\n\r\n                    //seller update\r\n                    require(owner == msg.sender);\r\n                    tokens[_token][owner] = tokens[_token][owner].sub(\r\n                        saleTokenAmt\r\n                    );\r\n                    tokens[usdc][owner] = tokens[usdc][owner].add(\r\n                        buyPrice.mul(saleTokenAmt)\r\n                    );\r\n\r\n                    //buyer update\r\n                    tokens[_token][buyer] = tokens[_token][buyer].add(\r\n                        saleTokenAmt\r\n                    );\r\n                    tokens[usdc][buyer] = tokens[usdc][buyer].sub(\r\n                        buyPrice.mul(saleTokenAmt)\r\n                    );\r\n                }\r\n\r\n                if (sellOrderToFill.amount == 0) break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getOrderFromArray(_Order[] memory _order, uint256 _id)\r\n        public\r\n        pure\r\n        returns (_Order memory)\r\n    {\r\n        _Order memory order;\r\n        for (uint256 i = 0; i < _order.length; i++) {\r\n            if (_order[i].id == _id) {\r\n                order = _order[i];\r\n                break;\r\n            }\r\n        }\r\n        return order;\r\n    }\r\n\r\n    function orderExists(\r\n        uint256 _id,\r\n        Side side,\r\n        address _token\r\n    ) public view returns (bool) {\r\n        _Order[] memory orders = orderBook[_token][uint256(side)];\r\n\r\n        for (uint256 i = 0; i < orders.length; i++) {\r\n            if (orders[i].id == _id) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n// Why is this a library and not abstract?\r\n// Why not an interface?\r\nlibrary PriceChecker {\r\n    // We could make this public, but then we'd have to deploy it\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Goerli ETH / USD Address\r\n        // https://docs.chain.link/docs/ethereum-addresses/\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\r\n        // );\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        // ETH/USD rate in 18 digit\r\n        return uint256(answer * 10000000000);\r\n        // or (Both will do the same thing)\r\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\r\n    }\r\n\r\n    // 1000000000\r\n    function getConversionRate(\r\n        uint256 _ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * _ethAmount) / 1000000000000000000;\r\n        // or (Both will do the same thing)\r\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\r\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    },
    "contracts/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}